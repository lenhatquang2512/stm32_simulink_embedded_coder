
LedBlinkUseSimlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003114  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080032a0  080032a0  000132a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003488  08003488  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003488  08003488  00013488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003490  08003490  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003490  08003490  00013490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000044  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000054  20000054  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003b0d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f4f  00000000  00000000  00023b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000418  00000000  00000000  00024a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000380  00000000  00000000  00024eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f090  00000000  00000000  00025230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004eab  00000000  00000000  000442c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf74d  00000000  00000000  0004916b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001088b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001280  00000000  00000000  00108908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003284 	.word	0x08003284

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003284 	.word	0x08003284

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2iz>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ac:	d215      	bcs.n	80008da <__aeabi_d2iz+0x36>
 80008ae:	d511      	bpl.n	80008d4 <__aeabi_d2iz+0x30>
 80008b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b8:	d912      	bls.n	80008e0 <__aeabi_d2iz+0x3c>
 80008ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008ca:	fa23 f002 	lsr.w	r0, r3, r2
 80008ce:	bf18      	it	ne
 80008d0:	4240      	negne	r0, r0
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d105      	bne.n	80008ec <__aeabi_d2iz+0x48>
 80008e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	bf08      	it	eq
 80008e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2uiz>:
 80008f4:	004a      	lsls	r2, r1, #1
 80008f6:	d211      	bcs.n	800091c <__aeabi_d2uiz+0x28>
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008fc:	d211      	bcs.n	8000922 <__aeabi_d2uiz+0x2e>
 80008fe:	d50d      	bpl.n	800091c <__aeabi_d2uiz+0x28>
 8000900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d40e      	bmi.n	8000928 <__aeabi_d2uiz+0x34>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	fa23 f002 	lsr.w	r0, r3, r2
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d102      	bne.n	800092e <__aeabi_d2uiz+0x3a>
 8000928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800092c:	4770      	bx	lr
 800092e:	f04f 0000 	mov.w	r0, #0
 8000932:	4770      	bx	lr

08000934 <__aeabi_uldivmod>:
 8000934:	b953      	cbnz	r3, 800094c <__aeabi_uldivmod+0x18>
 8000936:	b94a      	cbnz	r2, 800094c <__aeabi_uldivmod+0x18>
 8000938:	2900      	cmp	r1, #0
 800093a:	bf08      	it	eq
 800093c:	2800      	cmpeq	r0, #0
 800093e:	bf1c      	itt	ne
 8000940:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000944:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000948:	f000 b974 	b.w	8000c34 <__aeabi_idiv0>
 800094c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000950:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000954:	f000 f806 	bl	8000964 <__udivmoddi4>
 8000958:	f8dd e004 	ldr.w	lr, [sp, #4]
 800095c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000960:	b004      	add	sp, #16
 8000962:	4770      	bx	lr

08000964 <__udivmoddi4>:
 8000964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000968:	9d08      	ldr	r5, [sp, #32]
 800096a:	4604      	mov	r4, r0
 800096c:	468e      	mov	lr, r1
 800096e:	2b00      	cmp	r3, #0
 8000970:	d14d      	bne.n	8000a0e <__udivmoddi4+0xaa>
 8000972:	428a      	cmp	r2, r1
 8000974:	4694      	mov	ip, r2
 8000976:	d969      	bls.n	8000a4c <__udivmoddi4+0xe8>
 8000978:	fab2 f282 	clz	r2, r2
 800097c:	b152      	cbz	r2, 8000994 <__udivmoddi4+0x30>
 800097e:	fa01 f302 	lsl.w	r3, r1, r2
 8000982:	f1c2 0120 	rsb	r1, r2, #32
 8000986:	fa20 f101 	lsr.w	r1, r0, r1
 800098a:	fa0c fc02 	lsl.w	ip, ip, r2
 800098e:	ea41 0e03 	orr.w	lr, r1, r3
 8000992:	4094      	lsls	r4, r2
 8000994:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000998:	0c21      	lsrs	r1, r4, #16
 800099a:	fbbe f6f8 	udiv	r6, lr, r8
 800099e:	fa1f f78c 	uxth.w	r7, ip
 80009a2:	fb08 e316 	mls	r3, r8, r6, lr
 80009a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009aa:	fb06 f107 	mul.w	r1, r6, r7
 80009ae:	4299      	cmp	r1, r3
 80009b0:	d90a      	bls.n	80009c8 <__udivmoddi4+0x64>
 80009b2:	eb1c 0303 	adds.w	r3, ip, r3
 80009b6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009ba:	f080 811f 	bcs.w	8000bfc <__udivmoddi4+0x298>
 80009be:	4299      	cmp	r1, r3
 80009c0:	f240 811c 	bls.w	8000bfc <__udivmoddi4+0x298>
 80009c4:	3e02      	subs	r6, #2
 80009c6:	4463      	add	r3, ip
 80009c8:	1a5b      	subs	r3, r3, r1
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3310 	mls	r3, r8, r0, r3
 80009d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d8:	fb00 f707 	mul.w	r7, r0, r7
 80009dc:	42a7      	cmp	r7, r4
 80009de:	d90a      	bls.n	80009f6 <__udivmoddi4+0x92>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e8:	f080 810a 	bcs.w	8000c00 <__udivmoddi4+0x29c>
 80009ec:	42a7      	cmp	r7, r4
 80009ee:	f240 8107 	bls.w	8000c00 <__udivmoddi4+0x29c>
 80009f2:	4464      	add	r4, ip
 80009f4:	3802      	subs	r0, #2
 80009f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009fa:	1be4      	subs	r4, r4, r7
 80009fc:	2600      	movs	r6, #0
 80009fe:	b11d      	cbz	r5, 8000a08 <__udivmoddi4+0xa4>
 8000a00:	40d4      	lsrs	r4, r2
 8000a02:	2300      	movs	r3, #0
 8000a04:	e9c5 4300 	strd	r4, r3, [r5]
 8000a08:	4631      	mov	r1, r6
 8000a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0e:	428b      	cmp	r3, r1
 8000a10:	d909      	bls.n	8000a26 <__udivmoddi4+0xc2>
 8000a12:	2d00      	cmp	r5, #0
 8000a14:	f000 80ef 	beq.w	8000bf6 <__udivmoddi4+0x292>
 8000a18:	2600      	movs	r6, #0
 8000a1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a1e:	4630      	mov	r0, r6
 8000a20:	4631      	mov	r1, r6
 8000a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a26:	fab3 f683 	clz	r6, r3
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d14a      	bne.n	8000ac4 <__udivmoddi4+0x160>
 8000a2e:	428b      	cmp	r3, r1
 8000a30:	d302      	bcc.n	8000a38 <__udivmoddi4+0xd4>
 8000a32:	4282      	cmp	r2, r0
 8000a34:	f200 80f9 	bhi.w	8000c2a <__udivmoddi4+0x2c6>
 8000a38:	1a84      	subs	r4, r0, r2
 8000a3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a3e:	2001      	movs	r0, #1
 8000a40:	469e      	mov	lr, r3
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d0e0      	beq.n	8000a08 <__udivmoddi4+0xa4>
 8000a46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a4a:	e7dd      	b.n	8000a08 <__udivmoddi4+0xa4>
 8000a4c:	b902      	cbnz	r2, 8000a50 <__udivmoddi4+0xec>
 8000a4e:	deff      	udf	#255	; 0xff
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	2a00      	cmp	r2, #0
 8000a56:	f040 8092 	bne.w	8000b7e <__udivmoddi4+0x21a>
 8000a5a:	eba1 010c 	sub.w	r1, r1, ip
 8000a5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a62:	fa1f fe8c 	uxth.w	lr, ip
 8000a66:	2601      	movs	r6, #1
 8000a68:	0c20      	lsrs	r0, r4, #16
 8000a6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a76:	fb0e f003 	mul.w	r0, lr, r3
 8000a7a:	4288      	cmp	r0, r1
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x12c>
 8000a7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x12a>
 8000a88:	4288      	cmp	r0, r1
 8000a8a:	f200 80cb 	bhi.w	8000c24 <__udivmoddi4+0x2c0>
 8000a8e:	4643      	mov	r3, r8
 8000a90:	1a09      	subs	r1, r1, r0
 8000a92:	b2a4      	uxth	r4, r4
 8000a94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a98:	fb07 1110 	mls	r1, r7, r0, r1
 8000a9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000aa0:	fb0e fe00 	mul.w	lr, lr, r0
 8000aa4:	45a6      	cmp	lr, r4
 8000aa6:	d908      	bls.n	8000aba <__udivmoddi4+0x156>
 8000aa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ab0:	d202      	bcs.n	8000ab8 <__udivmoddi4+0x154>
 8000ab2:	45a6      	cmp	lr, r4
 8000ab4:	f200 80bb 	bhi.w	8000c2e <__udivmoddi4+0x2ca>
 8000ab8:	4608      	mov	r0, r1
 8000aba:	eba4 040e 	sub.w	r4, r4, lr
 8000abe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ac2:	e79c      	b.n	80009fe <__udivmoddi4+0x9a>
 8000ac4:	f1c6 0720 	rsb	r7, r6, #32
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ace:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ad2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ad6:	fa01 f306 	lsl.w	r3, r1, r6
 8000ada:	431c      	orrs	r4, r3
 8000adc:	40f9      	lsrs	r1, r7
 8000ade:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ae2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ae6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000aea:	0c20      	lsrs	r0, r4, #16
 8000aec:	fa1f fe8c 	uxth.w	lr, ip
 8000af0:	fb09 1118 	mls	r1, r9, r8, r1
 8000af4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af8:	fb08 f00e 	mul.w	r0, r8, lr
 8000afc:	4288      	cmp	r0, r1
 8000afe:	fa02 f206 	lsl.w	r2, r2, r6
 8000b02:	d90b      	bls.n	8000b1c <__udivmoddi4+0x1b8>
 8000b04:	eb1c 0101 	adds.w	r1, ip, r1
 8000b08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b0c:	f080 8088 	bcs.w	8000c20 <__udivmoddi4+0x2bc>
 8000b10:	4288      	cmp	r0, r1
 8000b12:	f240 8085 	bls.w	8000c20 <__udivmoddi4+0x2bc>
 8000b16:	f1a8 0802 	sub.w	r8, r8, #2
 8000b1a:	4461      	add	r1, ip
 8000b1c:	1a09      	subs	r1, r1, r0
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b24:	fb09 1110 	mls	r1, r9, r0, r1
 8000b28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b30:	458e      	cmp	lr, r1
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x1e2>
 8000b34:	eb1c 0101 	adds.w	r1, ip, r1
 8000b38:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b3c:	d26c      	bcs.n	8000c18 <__udivmoddi4+0x2b4>
 8000b3e:	458e      	cmp	lr, r1
 8000b40:	d96a      	bls.n	8000c18 <__udivmoddi4+0x2b4>
 8000b42:	3802      	subs	r0, #2
 8000b44:	4461      	add	r1, ip
 8000b46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b4e:	eba1 010e 	sub.w	r1, r1, lr
 8000b52:	42a1      	cmp	r1, r4
 8000b54:	46c8      	mov	r8, r9
 8000b56:	46a6      	mov	lr, r4
 8000b58:	d356      	bcc.n	8000c08 <__udivmoddi4+0x2a4>
 8000b5a:	d053      	beq.n	8000c04 <__udivmoddi4+0x2a0>
 8000b5c:	b15d      	cbz	r5, 8000b76 <__udivmoddi4+0x212>
 8000b5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b62:	eb61 010e 	sbc.w	r1, r1, lr
 8000b66:	fa01 f707 	lsl.w	r7, r1, r7
 8000b6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b6e:	40f1      	lsrs	r1, r6
 8000b70:	431f      	orrs	r7, r3
 8000b72:	e9c5 7100 	strd	r7, r1, [r5]
 8000b76:	2600      	movs	r6, #0
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	f1c2 0320 	rsb	r3, r2, #32
 8000b82:	40d8      	lsrs	r0, r3
 8000b84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b88:	fa21 f303 	lsr.w	r3, r1, r3
 8000b8c:	4091      	lsls	r1, r2
 8000b8e:	4301      	orrs	r1, r0
 8000b90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b94:	fa1f fe8c 	uxth.w	lr, ip
 8000b98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000ba0:	0c0b      	lsrs	r3, r1, #16
 8000ba2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ba6:	fb00 f60e 	mul.w	r6, r0, lr
 8000baa:	429e      	cmp	r6, r3
 8000bac:	fa04 f402 	lsl.w	r4, r4, r2
 8000bb0:	d908      	bls.n	8000bc4 <__udivmoddi4+0x260>
 8000bb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bba:	d22f      	bcs.n	8000c1c <__udivmoddi4+0x2b8>
 8000bbc:	429e      	cmp	r6, r3
 8000bbe:	d92d      	bls.n	8000c1c <__udivmoddi4+0x2b8>
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	4463      	add	r3, ip
 8000bc4:	1b9b      	subs	r3, r3, r6
 8000bc6:	b289      	uxth	r1, r1
 8000bc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000bd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	d908      	bls.n	8000bee <__udivmoddi4+0x28a>
 8000bdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000be0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000be4:	d216      	bcs.n	8000c14 <__udivmoddi4+0x2b0>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d914      	bls.n	8000c14 <__udivmoddi4+0x2b0>
 8000bea:	3e02      	subs	r6, #2
 8000bec:	4461      	add	r1, ip
 8000bee:	1ac9      	subs	r1, r1, r3
 8000bf0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bf4:	e738      	b.n	8000a68 <__udivmoddi4+0x104>
 8000bf6:	462e      	mov	r6, r5
 8000bf8:	4628      	mov	r0, r5
 8000bfa:	e705      	b.n	8000a08 <__udivmoddi4+0xa4>
 8000bfc:	4606      	mov	r6, r0
 8000bfe:	e6e3      	b.n	80009c8 <__udivmoddi4+0x64>
 8000c00:	4618      	mov	r0, r3
 8000c02:	e6f8      	b.n	80009f6 <__udivmoddi4+0x92>
 8000c04:	454b      	cmp	r3, r9
 8000c06:	d2a9      	bcs.n	8000b5c <__udivmoddi4+0x1f8>
 8000c08:	ebb9 0802 	subs.w	r8, r9, r2
 8000c0c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c10:	3801      	subs	r0, #1
 8000c12:	e7a3      	b.n	8000b5c <__udivmoddi4+0x1f8>
 8000c14:	4646      	mov	r6, r8
 8000c16:	e7ea      	b.n	8000bee <__udivmoddi4+0x28a>
 8000c18:	4620      	mov	r0, r4
 8000c1a:	e794      	b.n	8000b46 <__udivmoddi4+0x1e2>
 8000c1c:	4640      	mov	r0, r8
 8000c1e:	e7d1      	b.n	8000bc4 <__udivmoddi4+0x260>
 8000c20:	46d0      	mov	r8, sl
 8000c22:	e77b      	b.n	8000b1c <__udivmoddi4+0x1b8>
 8000c24:	3b02      	subs	r3, #2
 8000c26:	4461      	add	r1, ip
 8000c28:	e732      	b.n	8000a90 <__udivmoddi4+0x12c>
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	e709      	b.n	8000a42 <__udivmoddi4+0xde>
 8000c2e:	4464      	add	r4, ip
 8000c30:	3802      	subs	r0, #2
 8000c32:	e742      	b.n	8000aba <__udivmoddi4+0x156>

08000c34 <__aeabi_idiv0>:
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3c:	f000 f990 	bl	8000f60 <HAL_Init>

  /* USER CODE BEGIN Init */
  demo_pulse_led_initialize();
 8000c40:	f001 fa48 	bl	80020d4 <demo_pulse_led_initialize>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c44:	f000 f84a 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c48:	f000 f8b2 	bl	8000db0 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  demo_pulse_led_step();
 8000c4c:	f001 f938 	bl	8001ec0 <demo_pulse_led_step>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //LED YOLO
	  HAL_GPIO_TogglePin(GPIOD, LED_12_GREEN_Pin );
 8000c50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c54:	481f      	ldr	r0, [pc, #124]	; (8000cd4 <main+0x9c>)
 8000c56:	f000 fcb4 	bl	80015c2 <HAL_GPIO_TogglePin>
	  HAL_Delay(rtY.WaitTime);
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <main+0xa0>)
 8000c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c60:	4610      	mov	r0, r2
 8000c62:	4619      	mov	r1, r3
 8000c64:	f7ff fe46 	bl	80008f4 <__aeabi_d2uiz>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f9ea 	bl	8001044 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, LED_13_Pin);
 8000c70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c74:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <main+0x9c>)
 8000c76:	f000 fca4 	bl	80015c2 <HAL_GPIO_TogglePin>
	  HAL_Delay(rtY.WaitTime);
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <main+0xa0>)
 8000c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c80:	4610      	mov	r0, r2
 8000c82:	4619      	mov	r1, r3
 8000c84:	f7ff fe36 	bl	80008f4 <__aeabi_d2uiz>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f9da 	bl	8001044 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD,LED_14_Pin );
 8000c90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c94:	480f      	ldr	r0, [pc, #60]	; (8000cd4 <main+0x9c>)
 8000c96:	f000 fc94 	bl	80015c2 <HAL_GPIO_TogglePin>
	  HAL_Delay(rtY.WaitTime);
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <main+0xa0>)
 8000c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca0:	4610      	mov	r0, r2
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f7ff fe26 	bl	80008f4 <__aeabi_d2uiz>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f9ca 	bl	8001044 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, LED_15_Pin );
 8000cb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb4:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <main+0x9c>)
 8000cb6:	f000 fc84 	bl	80015c2 <HAL_GPIO_TogglePin>
	  HAL_Delay(rtY.WaitTime);
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <main+0xa0>)
 8000cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f7ff fe16 	bl	80008f4 <__aeabi_d2uiz>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f9ba 	bl	8001044 <HAL_Delay>
	  demo_pulse_led_step();
 8000cd0:	e7bc      	b.n	8000c4c <main+0x14>
 8000cd2:	bf00      	nop
 8000cd4:	40020c00 	.word	0x40020c00
 8000cd8:	20000048 	.word	0x20000048

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b094      	sub	sp, #80	; 0x50
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	2230      	movs	r2, #48	; 0x30
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 fa22 	bl	8002134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <SystemClock_Config+0xcc>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	4a27      	ldr	r2, [pc, #156]	; (8000da8 <SystemClock_Config+0xcc>)
 8000d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d10:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <SystemClock_Config+0xcc>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <SystemClock_Config+0xd0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a21      	ldr	r2, [pc, #132]	; (8000dac <SystemClock_Config+0xd0>)
 8000d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <SystemClock_Config+0xd0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d42:	2302      	movs	r3, #2
 8000d44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d50:	23a8      	movs	r3, #168	; 0xa8
 8000d52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5c:	f107 0320 	add.w	r3, r7, #32
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 fc49 	bl	80015f8 <HAL_RCC_OscConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d6c:	f000 f864 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d70:	230f      	movs	r3, #15
 8000d72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d74:	2302      	movs	r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2105      	movs	r1, #5
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 feaa 	bl	8001ae8 <HAL_RCC_ClockConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d9a:	f000 f84d 	bl	8000e38 <Error_Handler>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3750      	adds	r7, #80	; 0x50
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40007000 	.word	0x40007000

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_GPIO_Init+0x80>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <MX_GPIO_Init+0x80>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_GPIO_Init+0x80>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <MX_GPIO_Init+0x80>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <MX_GPIO_Init+0x80>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_GPIO_Init+0x80>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_12_GREEN_Pin|LED_13_Pin|LED_14_Pin|LED_15_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <MX_GPIO_Init+0x84>)
 8000e06:	f000 fbc3 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_12_GREEN_Pin LED_13_Pin LED_14_Pin LED_15_Pin */
  GPIO_InitStruct.Pin = LED_12_GREEN_Pin|LED_13_Pin|LED_14_Pin|LED_15_Pin;
 8000e0a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_GPIO_Init+0x84>)
 8000e24:	f000 fa18 	bl	8001258 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020c00 	.word	0x40020c00

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <Error_Handler+0x8>
	...

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e58:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e82:	2007      	movs	r0, #7
 8000e84:	f000 f9b4 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40023800 	.word	0x40023800

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f890 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f12:	490e      	ldr	r1, [pc, #56]	; (8000f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f28:	4c0b      	ldr	r4, [pc, #44]	; (8000f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f36:	f7ff ffd7 	bl	8000ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f001 f8d7 	bl	80020ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3e:	f7ff fe7b 	bl	8000c38 <main>
  bx  lr    
 8000f42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f50:	08003498 	.word	0x08003498
  ldr r2, =_sbss
 8000f54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f58:	20000054 	.word	0x20000054

08000f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <HAL_Init+0x40>)
 8000f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <HAL_Init+0x40>)
 8000f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_Init+0x40>)
 8000f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 f931 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 f808 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff ff56 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023c00 	.word	0x40023c00

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f93b 	bl	800123e <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe0:	f000 f911 	bl	8001206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000004 	.word	0x20000004

08001004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x20>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x24>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_IncTick+0x24>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008
 8001028:	2000002c 	.word	0x2000002c

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	2000002c 	.word	0x2000002c

08001044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff ffee 	bl	800102c <HAL_GetTick>
 8001050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800105c:	d005      	beq.n	800106a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_Delay+0x44>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800106a:	bf00      	nop
 800106c:	f7ff ffde 	bl	800102c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	429a      	cmp	r2, r3
 800107a:	d8f7      	bhi.n	800106c <HAL_Delay+0x28>
  {
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d0:	f7ff ff8e 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff47 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff5c 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff8e 	bl	8001144 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5d 	bl	80010f0 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffb0 	bl	80011ac <SysTick_Config>
 800124c:	4603      	mov	r3, r0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	e16b      	b.n	800154c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	429a      	cmp	r2, r3
 800128e:	f040 815a 	bne.w	8001546 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d005      	beq.n	80012aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d130      	bne.n	800130c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 0201 	and.w	r2, r3, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b03      	cmp	r3, #3
 8001316:	d017      	beq.n	8001348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d123      	bne.n	800139c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	220f      	movs	r2, #15
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	69b9      	ldr	r1, [r7, #24]
 8001398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0203 	and.w	r2, r3, #3
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80b4 	beq.w	8001546 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b60      	ldr	r3, [pc, #384]	; (8001564 <HAL_GPIO_Init+0x30c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a5f      	ldr	r2, [pc, #380]	; (8001564 <HAL_GPIO_Init+0x30c>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b5d      	ldr	r3, [pc, #372]	; (8001564 <HAL_GPIO_Init+0x30c>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013fa:	4a5b      	ldr	r2, [pc, #364]	; (8001568 <HAL_GPIO_Init+0x310>)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a52      	ldr	r2, [pc, #328]	; (800156c <HAL_GPIO_Init+0x314>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d02b      	beq.n	800147e <HAL_GPIO_Init+0x226>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a51      	ldr	r2, [pc, #324]	; (8001570 <HAL_GPIO_Init+0x318>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d025      	beq.n	800147a <HAL_GPIO_Init+0x222>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a50      	ldr	r2, [pc, #320]	; (8001574 <HAL_GPIO_Init+0x31c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01f      	beq.n	8001476 <HAL_GPIO_Init+0x21e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4f      	ldr	r2, [pc, #316]	; (8001578 <HAL_GPIO_Init+0x320>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x21a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4e      	ldr	r2, [pc, #312]	; (800157c <HAL_GPIO_Init+0x324>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x216>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4d      	ldr	r2, [pc, #308]	; (8001580 <HAL_GPIO_Init+0x328>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x212>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4c      	ldr	r2, [pc, #304]	; (8001584 <HAL_GPIO_Init+0x32c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x20e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4b      	ldr	r2, [pc, #300]	; (8001588 <HAL_GPIO_Init+0x330>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x20a>
 800145e:	2307      	movs	r3, #7
 8001460:	e00e      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001462:	2308      	movs	r3, #8
 8001464:	e00c      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001466:	2306      	movs	r3, #6
 8001468:	e00a      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800146a:	2305      	movs	r3, #5
 800146c:	e008      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800146e:	2304      	movs	r3, #4
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001472:	2303      	movs	r3, #3
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800147e:	2300      	movs	r3, #0
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	f002 0203 	and.w	r2, r2, #3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4093      	lsls	r3, r2
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001490:	4935      	ldr	r1, [pc, #212]	; (8001568 <HAL_GPIO_Init+0x310>)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_GPIO_Init+0x334>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c2:	4a32      	ldr	r2, [pc, #200]	; (800158c <HAL_GPIO_Init+0x334>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c8:	4b30      	ldr	r3, [pc, #192]	; (800158c <HAL_GPIO_Init+0x334>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ec:	4a27      	ldr	r2, [pc, #156]	; (800158c <HAL_GPIO_Init+0x334>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <HAL_GPIO_Init+0x334>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001516:	4a1d      	ldr	r2, [pc, #116]	; (800158c <HAL_GPIO_Init+0x334>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_GPIO_Init+0x334>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <HAL_GPIO_Init+0x334>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3301      	adds	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	f67f ae90 	bls.w	8001274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40013800 	.word	0x40013800
 800156c:	40020000 	.word	0x40020000
 8001570:	40020400 	.word	0x40020400
 8001574:	40020800 	.word	0x40020800
 8001578:	40020c00 	.word	0x40020c00
 800157c:	40021000 	.word	0x40021000
 8001580:	40021400 	.word	0x40021400
 8001584:	40021800 	.word	0x40021800
 8001588:	40021c00 	.word	0x40021c00
 800158c:	40013c00 	.word	0x40013c00

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015ac:	e003      	b.n	80015b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	619a      	str	r2, [r3, #24]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d4:	887a      	ldrh	r2, [r7, #2]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	041a      	lsls	r2, r3, #16
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43d9      	mvns	r1, r3
 80015e0:	887b      	ldrh	r3, [r7, #2]
 80015e2:	400b      	ands	r3, r1
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	619a      	str	r2, [r3, #24]
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e267      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d075      	beq.n	8001702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001616:	4b88      	ldr	r3, [pc, #544]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b04      	cmp	r3, #4
 8001620:	d00c      	beq.n	800163c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001622:	4b85      	ldr	r3, [pc, #532]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800162a:	2b08      	cmp	r3, #8
 800162c:	d112      	bne.n	8001654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162e:	4b82      	ldr	r3, [pc, #520]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800163a:	d10b      	bne.n	8001654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	4b7e      	ldr	r3, [pc, #504]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d05b      	beq.n	8001700 <HAL_RCC_OscConfig+0x108>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d157      	bne.n	8001700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e242      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165c:	d106      	bne.n	800166c <HAL_RCC_OscConfig+0x74>
 800165e:	4b76      	ldr	r3, [pc, #472]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a75      	ldr	r2, [pc, #468]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e01d      	b.n	80016a8 <HAL_RCC_OscConfig+0xb0>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x98>
 8001676:	4b70      	ldr	r3, [pc, #448]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6f      	ldr	r2, [pc, #444]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800167c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b6d      	ldr	r3, [pc, #436]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a6c      	ldr	r2, [pc, #432]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0xb0>
 8001690:	4b69      	ldr	r3, [pc, #420]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a68      	ldr	r2, [pc, #416]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b66      	ldr	r3, [pc, #408]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a65      	ldr	r2, [pc, #404]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 80016a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d013      	beq.n	80016d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fcbc 	bl	800102c <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fcb8 	bl	800102c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	; 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e207      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0xc0>
 80016d6:	e014      	b.n	8001702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fca8 	bl	800102c <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fca4 	bl	800102c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e1f3      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f2:	4b51      	ldr	r3, [pc, #324]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0xe8>
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d063      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800170e:	4b4a      	ldr	r3, [pc, #296]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00b      	beq.n	8001732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001722:	2b08      	cmp	r3, #8
 8001724:	d11c      	bne.n	8001760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001726:	4b44      	ldr	r3, [pc, #272]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d116      	bne.n	8001760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <HAL_RCC_OscConfig+0x152>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d001      	beq.n	800174a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e1c7      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174a:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4937      	ldr	r1, [pc, #220]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175e:	e03a      	b.n	80017d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001768:	4b34      	ldr	r3, [pc, #208]	; (800183c <HAL_RCC_OscConfig+0x244>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176e:	f7ff fc5d 	bl	800102c <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001776:	f7ff fc59 	bl	800102c <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e1a8      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001788:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001794:	4b28      	ldr	r3, [pc, #160]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4925      	ldr	r1, [pc, #148]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]
 80017a8:	e015      	b.n	80017d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017aa:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_RCC_OscConfig+0x244>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fc3c 	bl	800102c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b8:	f7ff fc38 	bl	800102c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e187      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d036      	beq.n	8001850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d016      	beq.n	8001818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_RCC_OscConfig+0x248>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff fc1c 	bl	800102c <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff fc18 	bl	800102c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e167      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800180c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x200>
 8001816:	e01b      	b.n	8001850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_OscConfig+0x248>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181e:	f7ff fc05 	bl	800102c <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001824:	e00e      	b.n	8001844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001826:	f7ff fc01 	bl	800102c <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d907      	bls.n	8001844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e150      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
 8001838:	40023800 	.word	0x40023800
 800183c:	42470000 	.word	0x42470000
 8001840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001844:	4b88      	ldr	r3, [pc, #544]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1ea      	bne.n	8001826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 8097 	beq.w	800198c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001862:	4b81      	ldr	r3, [pc, #516]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10f      	bne.n	800188e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b7d      	ldr	r3, [pc, #500]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a7c      	ldr	r2, [pc, #496]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b7a      	ldr	r3, [pc, #488]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800188a:	2301      	movs	r3, #1
 800188c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188e:	4b77      	ldr	r3, [pc, #476]	; (8001a6c <HAL_RCC_OscConfig+0x474>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d118      	bne.n	80018cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800189a:	4b74      	ldr	r3, [pc, #464]	; (8001a6c <HAL_RCC_OscConfig+0x474>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a73      	ldr	r2, [pc, #460]	; (8001a6c <HAL_RCC_OscConfig+0x474>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fbc1 	bl	800102c <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ae:	f7ff fbbd 	bl	800102c <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e10c      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	4b6a      	ldr	r3, [pc, #424]	; (8001a6c <HAL_RCC_OscConfig+0x474>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x2ea>
 80018d4:	4b64      	ldr	r3, [pc, #400]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d8:	4a63      	ldr	r2, [pc, #396]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6713      	str	r3, [r2, #112]	; 0x70
 80018e0:	e01c      	b.n	800191c <HAL_RCC_OscConfig+0x324>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x30c>
 80018ea:	4b5f      	ldr	r3, [pc, #380]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	4a5e      	ldr	r2, [pc, #376]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6713      	str	r3, [r2, #112]	; 0x70
 80018f6:	4b5c      	ldr	r3, [pc, #368]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	4a5b      	ldr	r2, [pc, #364]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6713      	str	r3, [r2, #112]	; 0x70
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0x324>
 8001904:	4b58      	ldr	r3, [pc, #352]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	4a57      	ldr	r2, [pc, #348]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	6713      	str	r3, [r2, #112]	; 0x70
 8001910:	4b55      	ldr	r3, [pc, #340]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001914:	4a54      	ldr	r2, [pc, #336]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001916:	f023 0304 	bic.w	r3, r3, #4
 800191a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d015      	beq.n	8001950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7ff fb82 	bl	800102c <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192a:	e00a      	b.n	8001942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff fb7e 	bl	800102c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	; 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e0cb      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001942:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0ee      	beq.n	800192c <HAL_RCC_OscConfig+0x334>
 800194e:	e014      	b.n	800197a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff fb6c 	bl	800102c <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001956:	e00a      	b.n	800196e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7ff fb68 	bl	800102c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	; 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e0b5      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196e:	4b3e      	ldr	r3, [pc, #248]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1ee      	bne.n	8001958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800197a:	7dfb      	ldrb	r3, [r7, #23]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001980:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	4a38      	ldr	r2, [pc, #224]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800198a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80a1 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d05c      	beq.n	8001a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d141      	bne.n	8001a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019aa:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <HAL_RCC_OscConfig+0x478>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fb3c 	bl	800102c <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff fb38 	bl	800102c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e087      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69da      	ldr	r2, [r3, #28]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	019b      	lsls	r3, r3, #6
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ec:	085b      	lsrs	r3, r3, #1
 80019ee:	3b01      	subs	r3, #1
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	061b      	lsls	r3, r3, #24
 80019fa:	491b      	ldr	r1, [pc, #108]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x478>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7ff fb11 	bl	800102c <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0e:	f7ff fb0d 	bl	800102c <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e05c      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x416>
 8001a2c:	e054      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_RCC_OscConfig+0x478>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fafa 	bl	800102c <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff faf6 	bl	800102c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e045      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x444>
 8001a5a:	e03d      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d107      	bne.n	8001a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e038      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_RCC_OscConfig+0x4ec>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d028      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d121      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d11a      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d111      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	085b      	lsrs	r3, r3, #1
 8001abc:	3b01      	subs	r3, #1
 8001abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d107      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0cc      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b68      	ldr	r3, [pc, #416]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d90c      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b65      	ldr	r3, [pc, #404]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b63      	ldr	r3, [pc, #396]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0b8      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b3c:	4b59      	ldr	r3, [pc, #356]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b54:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a52      	ldr	r2, [pc, #328]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b60:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	494d      	ldr	r1, [pc, #308]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d044      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d119      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e07f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e06f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb6:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e067      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc6:	4b37      	ldr	r3, [pc, #220]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f023 0203 	bic.w	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4934      	ldr	r1, [pc, #208]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd8:	f7ff fa28 	bl	800102c <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be0:	f7ff fa24 	bl	800102c <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e04f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 020c 	and.w	r2, r3, #12
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1eb      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c08:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d20c      	bcs.n	8001c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e032      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4916      	ldr	r1, [pc, #88]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c6e:	f000 f821 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001c72:	4602      	mov	r2, r0
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	490a      	ldr	r1, [pc, #40]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	5ccb      	ldrb	r3, [r1, r3]
 8001c82:	fa22 f303 	lsr.w	r3, r2, r3
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f988 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023c00 	.word	0x40023c00
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	080032a0 	.word	0x080032a0
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb8:	b094      	sub	sp, #80	; 0x50
 8001cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ccc:	4b79      	ldr	r3, [pc, #484]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d00d      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	f200 80e1 	bhi.w	8001ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d003      	beq.n	8001cee <HAL_RCC_GetSysClockFreq+0x3a>
 8001ce6:	e0db      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce8:	4b73      	ldr	r3, [pc, #460]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001cec:	e0db      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cee:	4b73      	ldr	r3, [pc, #460]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8001cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cf2:	e0d8      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf4:	4b6f      	ldr	r3, [pc, #444]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cfe:	4b6d      	ldr	r3, [pc, #436]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d063      	beq.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0a:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	099b      	lsrs	r3, r3, #6
 8001d10:	2200      	movs	r2, #0
 8001d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
 8001d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d26:	4622      	mov	r2, r4
 8001d28:	462b      	mov	r3, r5
 8001d2a:	f04f 0000 	mov.w	r0, #0
 8001d2e:	f04f 0100 	mov.w	r1, #0
 8001d32:	0159      	lsls	r1, r3, #5
 8001d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d38:	0150      	lsls	r0, r2, #5
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4621      	mov	r1, r4
 8001d40:	1a51      	subs	r1, r2, r1
 8001d42:	6139      	str	r1, [r7, #16]
 8001d44:	4629      	mov	r1, r5
 8001d46:	eb63 0301 	sbc.w	r3, r3, r1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d58:	4659      	mov	r1, fp
 8001d5a:	018b      	lsls	r3, r1, #6
 8001d5c:	4651      	mov	r1, sl
 8001d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d62:	4651      	mov	r1, sl
 8001d64:	018a      	lsls	r2, r1, #6
 8001d66:	4651      	mov	r1, sl
 8001d68:	ebb2 0801 	subs.w	r8, r2, r1
 8001d6c:	4659      	mov	r1, fp
 8001d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d86:	4690      	mov	r8, r2
 8001d88:	4699      	mov	r9, r3
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	eb18 0303 	adds.w	r3, r8, r3
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	462b      	mov	r3, r5
 8001d94:	eb49 0303 	adc.w	r3, r9, r3
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001da6:	4629      	mov	r1, r5
 8001da8:	024b      	lsls	r3, r1, #9
 8001daa:	4621      	mov	r1, r4
 8001dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001db0:	4621      	mov	r1, r4
 8001db2:	024a      	lsls	r2, r1, #9
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dba:	2200      	movs	r2, #0
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dc4:	f7fe fdb6 	bl	8000934 <__aeabi_uldivmod>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4613      	mov	r3, r2
 8001dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dd0:	e058      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	099b      	lsrs	r3, r3, #6
 8001dd8:	2200      	movs	r2, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	4611      	mov	r1, r2
 8001dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
 8001de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dec:	4642      	mov	r2, r8
 8001dee:	464b      	mov	r3, r9
 8001df0:	f04f 0000 	mov.w	r0, #0
 8001df4:	f04f 0100 	mov.w	r1, #0
 8001df8:	0159      	lsls	r1, r3, #5
 8001dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dfe:	0150      	lsls	r0, r2, #5
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4641      	mov	r1, r8
 8001e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e0a:	4649      	mov	r1, r9
 8001e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e24:	ebb2 040a 	subs.w	r4, r2, sl
 8001e28:	eb63 050b 	sbc.w	r5, r3, fp
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	00eb      	lsls	r3, r5, #3
 8001e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e3a:	00e2      	lsls	r2, r4, #3
 8001e3c:	4614      	mov	r4, r2
 8001e3e:	461d      	mov	r5, r3
 8001e40:	4643      	mov	r3, r8
 8001e42:	18e3      	adds	r3, r4, r3
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	464b      	mov	r3, r9
 8001e48:	eb45 0303 	adc.w	r3, r5, r3
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	028b      	lsls	r3, r1, #10
 8001e5e:	4621      	mov	r1, r4
 8001e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e64:	4621      	mov	r1, r4
 8001e66:	028a      	lsls	r2, r1, #10
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	61fa      	str	r2, [r7, #28]
 8001e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e78:	f7fe fd5c 	bl	8000934 <__aeabi_uldivmod>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4613      	mov	r3, r2
 8001e82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e9e:	e002      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ea2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3750      	adds	r7, #80	; 0x50
 8001eac:	46bd      	mov	sp, r7
 8001eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	00f42400 	.word	0x00f42400
 8001ebc:	007a1200 	.word	0x007a1200

08001ec0 <demo_pulse_led_step>:
static RT_MODEL rtM_;
RT_MODEL *const rtM = &rtM_;

/* Model step function */
void demo_pulse_led_step(void)
{
 8001ec0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
  real_T lastSin_tmp;

  /* Sin: '<Root>/Sine Wave' */
  if (rtDW.systemEnable != 0) {
 8001ec8:	4b7d      	ldr	r3, [pc, #500]	; (80020c0 <demo_pulse_led_step+0x200>)
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d026      	beq.n	8001f1e <demo_pulse_led_step+0x5e>
    lastSin_tmp = 0.1 * ((rtM->Timing.clockTick0) * 1.0);
 8001ed0:	4b7c      	ldr	r3, [pc, #496]	; (80020c4 <demo_pulse_led_step+0x204>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fbe3 	bl	80006a0 <__aeabi_ui2d>
 8001eda:	a36f      	add	r3, pc, #444	; (adr r3, 8002098 <demo_pulse_led_step+0x1d8>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	f7fe f972 	bl	80001c8 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	e9c7 2300 	strd	r2, r3, [r7]
    rtDW.lastSin = sin(lastSin_tmp);
 8001eec:	ed97 0b00 	vldr	d0, [r7]
 8001ef0:	f000 f97e 	bl	80021f0 <sin>
 8001ef4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ef8:	eef0 7a60 	vmov.f32	s15, s1
 8001efc:	4b70      	ldr	r3, [pc, #448]	; (80020c0 <demo_pulse_led_step+0x200>)
 8001efe:	ed83 7b00 	vstr	d7, [r3]
    rtDW.lastCos = cos(lastSin_tmp);
 8001f02:	ed97 0b00 	vldr	d0, [r7]
 8001f06:	f000 f91f 	bl	8002148 <cos>
 8001f0a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f0e:	eef0 7a60 	vmov.f32	s15, s1
 8001f12:	4b6b      	ldr	r3, [pc, #428]	; (80020c0 <demo_pulse_led_step+0x200>)
 8001f14:	ed83 7b02 	vstr	d7, [r3, #8]
    rtDW.systemEnable = 0;
 8001f18:	4b69      	ldr	r3, [pc, #420]	; (80020c0 <demo_pulse_led_step+0x200>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]

  /* Outport: '<Root>/WaitTime' incorporates:
   *  Gain: '<Root>/Gain'
   *  Sin: '<Root>/Sine Wave'
   */
  rtY.WaitTime = (((rtDW.lastSin * 0.99500416527802571 + rtDW.lastCos *
 8001f1e:	4b68      	ldr	r3, [pc, #416]	; (80020c0 <demo_pulse_led_step+0x200>)
 8001f20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f24:	a35e      	add	r3, pc, #376	; (adr r3, 80020a0 <demo_pulse_led_step+0x1e0>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	f7fe f94d 	bl	80001c8 <__aeabi_dmul>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4614      	mov	r4, r2
 8001f34:	461d      	mov	r5, r3
 8001f36:	4b62      	ldr	r3, [pc, #392]	; (80020c0 <demo_pulse_led_step+0x200>)
 8001f38:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f3c:	a35a      	add	r3, pc, #360	; (adr r3, 80020a8 <demo_pulse_led_step+0x1e8>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	f7fe f941 	bl	80001c8 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	4629      	mov	r1, r5
 8001f4e:	f7fe fa6b 	bl	8000428 <__adddf3>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
                    -0.099833416646828155) * 0.99500416527802571 + (rtDW.lastCos
 8001f5a:	a351      	add	r3, pc, #324	; (adr r3, 80020a0 <demo_pulse_led_step+0x1e0>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe f932 	bl	80001c8 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4614      	mov	r4, r2
 8001f6a:	461d      	mov	r5, r3
 8001f6c:	4b54      	ldr	r3, [pc, #336]	; (80020c0 <demo_pulse_led_step+0x200>)
 8001f6e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    * 0.99500416527802571 - rtDW.lastSin * -0.099833416646828155) *
 8001f72:	a34b      	add	r3, pc, #300	; (adr r3, 80020a0 <demo_pulse_led_step+0x1e0>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	f7fe f926 	bl	80001c8 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4690      	mov	r8, r2
 8001f82:	4699      	mov	r9, r3
 8001f84:	4b4e      	ldr	r3, [pc, #312]	; (80020c0 <demo_pulse_led_step+0x200>)
 8001f86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f8a:	a349      	add	r3, pc, #292	; (adr r3, 80020b0 <demo_pulse_led_step+0x1f0>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe f91a 	bl	80001c8 <__aeabi_dmul>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4640      	mov	r0, r8
 8001f9a:	4649      	mov	r1, r9
 8001f9c:	f7fe fa44 	bl	8000428 <__adddf3>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	a341      	add	r3, pc, #260	; (adr r3, 80020b0 <demo_pulse_led_step+0x1f0>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe f90b 	bl	80001c8 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
                    -0.099833416646828155) * 0.99500416527802571 + (rtDW.lastCos
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	4629      	mov	r1, r5
 8001fba:	f7fe fa35 	bl	8000428 <__adddf3>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4619      	mov	r1, r3
                   0.099833416646828155) * 0.2 + 0.25) * 1000.0;
 8001fc6:	a33c      	add	r3, pc, #240	; (adr r3, 80020b8 <demo_pulse_led_step+0x1f8>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	f7fe f8fc 	bl	80001c8 <__aeabi_dmul>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <demo_pulse_led_step+0x208>)
 8001fde:	f7fe fa23 	bl	8000428 <__adddf3>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	4b37      	ldr	r3, [pc, #220]	; (80020cc <demo_pulse_led_step+0x20c>)
 8001ff0:	f7fe f8ea 	bl	80001c8 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
  rtY.WaitTime = (((rtDW.lastSin * 0.99500416527802571 + rtDW.lastCos *
 8001ff8:	4935      	ldr	r1, [pc, #212]	; (80020d0 <demo_pulse_led_step+0x210>)
 8001ffa:	e9c1 2300 	strd	r2, r3, [r1]

  /* Update for Sin: '<Root>/Sine Wave' */
  lastSin_tmp = rtDW.lastSin;
 8001ffe:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <demo_pulse_led_step+0x200>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	e9c7 2300 	strd	r2, r3, [r7]
  rtDW.lastSin = rtDW.lastSin * 0.99500416527802571 + rtDW.lastCos *
 8002008:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <demo_pulse_led_step+0x200>)
 800200a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800200e:	a324      	add	r3, pc, #144	; (adr r3, 80020a0 <demo_pulse_led_step+0x1e0>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe f8d8 	bl	80001c8 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4614      	mov	r4, r2
 800201e:	461d      	mov	r5, r3
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <demo_pulse_led_step+0x200>)
 8002022:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002026:	a322      	add	r3, pc, #136	; (adr r3, 80020b0 <demo_pulse_led_step+0x1f0>)
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	f7fe f8cc 	bl	80001c8 <__aeabi_dmul>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4620      	mov	r0, r4
 8002036:	4629      	mov	r1, r5
 8002038:	f7fe f9f6 	bl	8000428 <__adddf3>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	491f      	ldr	r1, [pc, #124]	; (80020c0 <demo_pulse_led_step+0x200>)
 8002042:	e9c1 2300 	strd	r2, r3, [r1]
    0.099833416646828155;
  rtDW.lastCos = rtDW.lastCos * 0.99500416527802571 - lastSin_tmp *
 8002046:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <demo_pulse_led_step+0x200>)
 8002048:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800204c:	a314      	add	r3, pc, #80	; (adr r3, 80020a0 <demo_pulse_led_step+0x1e0>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f7fe f8b9 	bl	80001c8 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4614      	mov	r4, r2
 800205c:	461d      	mov	r5, r3
 800205e:	a314      	add	r3, pc, #80	; (adr r3, 80020b0 <demo_pulse_led_step+0x1f0>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002068:	f7fe f8ae 	bl	80001c8 <__aeabi_dmul>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4620      	mov	r0, r4
 8002072:	4629      	mov	r1, r5
 8002074:	f7fe f9d6 	bl	8000424 <__aeabi_dsub>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4910      	ldr	r1, [pc, #64]	; (80020c0 <demo_pulse_led_step+0x200>)
 800207e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  /* The "clockTick0" counts the number of times the code of this task has
   * been executed. The resolution of this integer timer is 1.0, which is the step size
   * of the task. Size of "clockTick0" ensures timer will not overflow during the
   * application lifespan selected.
   */
  rtM->Timing.clockTick0++;
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <demo_pulse_led_step+0x204>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	3201      	adds	r2, #1
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002094:	f3af 8000 	nop.w
 8002098:	9999999a 	.word	0x9999999a
 800209c:	3fb99999 	.word	0x3fb99999
 80020a0:	f9a817c0 	.word	0xf9a817c0
 80020a4:	3fefd712 	.word	0x3fefd712
 80020a8:	cb8bcb2c 	.word	0xcb8bcb2c
 80020ac:	bfb98eae 	.word	0xbfb98eae
 80020b0:	cb8bcb2c 	.word	0xcb8bcb2c
 80020b4:	3fb98eae 	.word	0x3fb98eae
 80020b8:	9999999a 	.word	0x9999999a
 80020bc:	3fc99999 	.word	0x3fc99999
 80020c0:	20000030 	.word	0x20000030
 80020c4:	20000050 	.word	0x20000050
 80020c8:	3fd00000 	.word	0x3fd00000
 80020cc:	408f4000 	.word	0x408f4000
 80020d0:	20000048 	.word	0x20000048

080020d4 <demo_pulse_led_initialize>:

/* Model initialize function */
void demo_pulse_led_initialize(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* Enable for Sin: '<Root>/Sine Wave' */
  rtDW.systemEnable = 1;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <demo_pulse_led_initialize+0x14>)
 80020da:	2201      	movs	r2, #1
 80020dc:	611a      	str	r2, [r3, #16]
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	20000030 	.word	0x20000030

080020ec <__libc_init_array>:
 80020ec:	b570      	push	{r4, r5, r6, lr}
 80020ee:	4d0d      	ldr	r5, [pc, #52]	; (8002124 <__libc_init_array+0x38>)
 80020f0:	4c0d      	ldr	r4, [pc, #52]	; (8002128 <__libc_init_array+0x3c>)
 80020f2:	1b64      	subs	r4, r4, r5
 80020f4:	10a4      	asrs	r4, r4, #2
 80020f6:	2600      	movs	r6, #0
 80020f8:	42a6      	cmp	r6, r4
 80020fa:	d109      	bne.n	8002110 <__libc_init_array+0x24>
 80020fc:	4d0b      	ldr	r5, [pc, #44]	; (800212c <__libc_init_array+0x40>)
 80020fe:	4c0c      	ldr	r4, [pc, #48]	; (8002130 <__libc_init_array+0x44>)
 8002100:	f001 f8c0 	bl	8003284 <_init>
 8002104:	1b64      	subs	r4, r4, r5
 8002106:	10a4      	asrs	r4, r4, #2
 8002108:	2600      	movs	r6, #0
 800210a:	42a6      	cmp	r6, r4
 800210c:	d105      	bne.n	800211a <__libc_init_array+0x2e>
 800210e:	bd70      	pop	{r4, r5, r6, pc}
 8002110:	f855 3b04 	ldr.w	r3, [r5], #4
 8002114:	4798      	blx	r3
 8002116:	3601      	adds	r6, #1
 8002118:	e7ee      	b.n	80020f8 <__libc_init_array+0xc>
 800211a:	f855 3b04 	ldr.w	r3, [r5], #4
 800211e:	4798      	blx	r3
 8002120:	3601      	adds	r6, #1
 8002122:	e7f2      	b.n	800210a <__libc_init_array+0x1e>
 8002124:	08003490 	.word	0x08003490
 8002128:	08003490 	.word	0x08003490
 800212c:	08003490 	.word	0x08003490
 8002130:	08003494 	.word	0x08003494

08002134 <memset>:
 8002134:	4402      	add	r2, r0
 8002136:	4603      	mov	r3, r0
 8002138:	4293      	cmp	r3, r2
 800213a:	d100      	bne.n	800213e <memset+0xa>
 800213c:	4770      	bx	lr
 800213e:	f803 1b01 	strb.w	r1, [r3], #1
 8002142:	e7f9      	b.n	8002138 <memset+0x4>
 8002144:	0000      	movs	r0, r0
	...

08002148 <cos>:
 8002148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800214a:	ec53 2b10 	vmov	r2, r3, d0
 800214e:	4826      	ldr	r0, [pc, #152]	; (80021e8 <cos+0xa0>)
 8002150:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002154:	4281      	cmp	r1, r0
 8002156:	dc06      	bgt.n	8002166 <cos+0x1e>
 8002158:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80021e0 <cos+0x98>
 800215c:	b005      	add	sp, #20
 800215e:	f85d eb04 	ldr.w	lr, [sp], #4
 8002162:	f000 baa9 	b.w	80026b8 <__kernel_cos>
 8002166:	4821      	ldr	r0, [pc, #132]	; (80021ec <cos+0xa4>)
 8002168:	4281      	cmp	r1, r0
 800216a:	dd09      	ble.n	8002180 <cos+0x38>
 800216c:	ee10 0a10 	vmov	r0, s0
 8002170:	4619      	mov	r1, r3
 8002172:	f7fe f957 	bl	8000424 <__aeabi_dsub>
 8002176:	ec41 0b10 	vmov	d0, r0, r1
 800217a:	b005      	add	sp, #20
 800217c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002180:	4668      	mov	r0, sp
 8002182:	f000 f88d 	bl	80022a0 <__ieee754_rem_pio2>
 8002186:	f000 0003 	and.w	r0, r0, #3
 800218a:	2801      	cmp	r0, #1
 800218c:	d00b      	beq.n	80021a6 <cos+0x5e>
 800218e:	2802      	cmp	r0, #2
 8002190:	d016      	beq.n	80021c0 <cos+0x78>
 8002192:	b9e0      	cbnz	r0, 80021ce <cos+0x86>
 8002194:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002198:	ed9d 0b00 	vldr	d0, [sp]
 800219c:	f000 fa8c 	bl	80026b8 <__kernel_cos>
 80021a0:	ec51 0b10 	vmov	r0, r1, d0
 80021a4:	e7e7      	b.n	8002176 <cos+0x2e>
 80021a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80021aa:	ed9d 0b00 	vldr	d0, [sp]
 80021ae:	f000 fe9b 	bl	8002ee8 <__kernel_sin>
 80021b2:	ec53 2b10 	vmov	r2, r3, d0
 80021b6:	ee10 0a10 	vmov	r0, s0
 80021ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80021be:	e7da      	b.n	8002176 <cos+0x2e>
 80021c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80021c4:	ed9d 0b00 	vldr	d0, [sp]
 80021c8:	f000 fa76 	bl	80026b8 <__kernel_cos>
 80021cc:	e7f1      	b.n	80021b2 <cos+0x6a>
 80021ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80021d2:	ed9d 0b00 	vldr	d0, [sp]
 80021d6:	2001      	movs	r0, #1
 80021d8:	f000 fe86 	bl	8002ee8 <__kernel_sin>
 80021dc:	e7e0      	b.n	80021a0 <cos+0x58>
 80021de:	bf00      	nop
	...
 80021e8:	3fe921fb 	.word	0x3fe921fb
 80021ec:	7fefffff 	.word	0x7fefffff

080021f0 <sin>:
 80021f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80021f2:	ec53 2b10 	vmov	r2, r3, d0
 80021f6:	4828      	ldr	r0, [pc, #160]	; (8002298 <sin+0xa8>)
 80021f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80021fc:	4281      	cmp	r1, r0
 80021fe:	dc07      	bgt.n	8002210 <sin+0x20>
 8002200:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8002290 <sin+0xa0>
 8002204:	2000      	movs	r0, #0
 8002206:	b005      	add	sp, #20
 8002208:	f85d eb04 	ldr.w	lr, [sp], #4
 800220c:	f000 be6c 	b.w	8002ee8 <__kernel_sin>
 8002210:	4822      	ldr	r0, [pc, #136]	; (800229c <sin+0xac>)
 8002212:	4281      	cmp	r1, r0
 8002214:	dd09      	ble.n	800222a <sin+0x3a>
 8002216:	ee10 0a10 	vmov	r0, s0
 800221a:	4619      	mov	r1, r3
 800221c:	f7fe f902 	bl	8000424 <__aeabi_dsub>
 8002220:	ec41 0b10 	vmov	d0, r0, r1
 8002224:	b005      	add	sp, #20
 8002226:	f85d fb04 	ldr.w	pc, [sp], #4
 800222a:	4668      	mov	r0, sp
 800222c:	f000 f838 	bl	80022a0 <__ieee754_rem_pio2>
 8002230:	f000 0003 	and.w	r0, r0, #3
 8002234:	2801      	cmp	r0, #1
 8002236:	d00c      	beq.n	8002252 <sin+0x62>
 8002238:	2802      	cmp	r0, #2
 800223a:	d011      	beq.n	8002260 <sin+0x70>
 800223c:	b9f0      	cbnz	r0, 800227c <sin+0x8c>
 800223e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002242:	ed9d 0b00 	vldr	d0, [sp]
 8002246:	2001      	movs	r0, #1
 8002248:	f000 fe4e 	bl	8002ee8 <__kernel_sin>
 800224c:	ec51 0b10 	vmov	r0, r1, d0
 8002250:	e7e6      	b.n	8002220 <sin+0x30>
 8002252:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002256:	ed9d 0b00 	vldr	d0, [sp]
 800225a:	f000 fa2d 	bl	80026b8 <__kernel_cos>
 800225e:	e7f5      	b.n	800224c <sin+0x5c>
 8002260:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002264:	ed9d 0b00 	vldr	d0, [sp]
 8002268:	2001      	movs	r0, #1
 800226a:	f000 fe3d 	bl	8002ee8 <__kernel_sin>
 800226e:	ec53 2b10 	vmov	r2, r3, d0
 8002272:	ee10 0a10 	vmov	r0, s0
 8002276:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800227a:	e7d1      	b.n	8002220 <sin+0x30>
 800227c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002280:	ed9d 0b00 	vldr	d0, [sp]
 8002284:	f000 fa18 	bl	80026b8 <__kernel_cos>
 8002288:	e7f1      	b.n	800226e <sin+0x7e>
 800228a:	bf00      	nop
 800228c:	f3af 8000 	nop.w
	...
 8002298:	3fe921fb 	.word	0x3fe921fb
 800229c:	7fefffff 	.word	0x7fefffff

080022a0 <__ieee754_rem_pio2>:
 80022a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022a4:	ed2d 8b02 	vpush	{d8}
 80022a8:	ec55 4b10 	vmov	r4, r5, d0
 80022ac:	4bca      	ldr	r3, [pc, #808]	; (80025d8 <__ieee754_rem_pio2+0x338>)
 80022ae:	b08b      	sub	sp, #44	; 0x2c
 80022b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80022b4:	4598      	cmp	r8, r3
 80022b6:	4682      	mov	sl, r0
 80022b8:	9502      	str	r5, [sp, #8]
 80022ba:	dc08      	bgt.n	80022ce <__ieee754_rem_pio2+0x2e>
 80022bc:	2200      	movs	r2, #0
 80022be:	2300      	movs	r3, #0
 80022c0:	ed80 0b00 	vstr	d0, [r0]
 80022c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80022c8:	f04f 0b00 	mov.w	fp, #0
 80022cc:	e028      	b.n	8002320 <__ieee754_rem_pio2+0x80>
 80022ce:	4bc3      	ldr	r3, [pc, #780]	; (80025dc <__ieee754_rem_pio2+0x33c>)
 80022d0:	4598      	cmp	r8, r3
 80022d2:	dc78      	bgt.n	80023c6 <__ieee754_rem_pio2+0x126>
 80022d4:	9b02      	ldr	r3, [sp, #8]
 80022d6:	4ec2      	ldr	r6, [pc, #776]	; (80025e0 <__ieee754_rem_pio2+0x340>)
 80022d8:	2b00      	cmp	r3, #0
 80022da:	ee10 0a10 	vmov	r0, s0
 80022de:	a3b0      	add	r3, pc, #704	; (adr r3, 80025a0 <__ieee754_rem_pio2+0x300>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	4629      	mov	r1, r5
 80022e6:	dd39      	ble.n	800235c <__ieee754_rem_pio2+0xbc>
 80022e8:	f7fe f89c 	bl	8000424 <__aeabi_dsub>
 80022ec:	45b0      	cmp	r8, r6
 80022ee:	4604      	mov	r4, r0
 80022f0:	460d      	mov	r5, r1
 80022f2:	d01b      	beq.n	800232c <__ieee754_rem_pio2+0x8c>
 80022f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80025a8 <__ieee754_rem_pio2+0x308>)
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	f7fe f893 	bl	8000424 <__aeabi_dsub>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	e9ca 2300 	strd	r2, r3, [sl]
 8002306:	4620      	mov	r0, r4
 8002308:	4629      	mov	r1, r5
 800230a:	f7fe f88b 	bl	8000424 <__aeabi_dsub>
 800230e:	a3a6      	add	r3, pc, #664	; (adr r3, 80025a8 <__ieee754_rem_pio2+0x308>)
 8002310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002314:	f7fe f886 	bl	8000424 <__aeabi_dsub>
 8002318:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800231c:	f04f 0b01 	mov.w	fp, #1
 8002320:	4658      	mov	r0, fp
 8002322:	b00b      	add	sp, #44	; 0x2c
 8002324:	ecbd 8b02 	vpop	{d8}
 8002328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800232c:	a3a0      	add	r3, pc, #640	; (adr r3, 80025b0 <__ieee754_rem_pio2+0x310>)
 800232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002332:	f7fe f877 	bl	8000424 <__aeabi_dsub>
 8002336:	a3a0      	add	r3, pc, #640	; (adr r3, 80025b8 <__ieee754_rem_pio2+0x318>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	4604      	mov	r4, r0
 800233e:	460d      	mov	r5, r1
 8002340:	f7fe f870 	bl	8000424 <__aeabi_dsub>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	e9ca 2300 	strd	r2, r3, [sl]
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fe f868 	bl	8000424 <__aeabi_dsub>
 8002354:	a398      	add	r3, pc, #608	; (adr r3, 80025b8 <__ieee754_rem_pio2+0x318>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	e7db      	b.n	8002314 <__ieee754_rem_pio2+0x74>
 800235c:	f7fe f864 	bl	8000428 <__adddf3>
 8002360:	45b0      	cmp	r8, r6
 8002362:	4604      	mov	r4, r0
 8002364:	460d      	mov	r5, r1
 8002366:	d016      	beq.n	8002396 <__ieee754_rem_pio2+0xf6>
 8002368:	a38f      	add	r3, pc, #572	; (adr r3, 80025a8 <__ieee754_rem_pio2+0x308>)
 800236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236e:	f7fe f85b 	bl	8000428 <__adddf3>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	e9ca 2300 	strd	r2, r3, [sl]
 800237a:	4620      	mov	r0, r4
 800237c:	4629      	mov	r1, r5
 800237e:	f7fe f851 	bl	8000424 <__aeabi_dsub>
 8002382:	a389      	add	r3, pc, #548	; (adr r3, 80025a8 <__ieee754_rem_pio2+0x308>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f84e 	bl	8000428 <__adddf3>
 800238c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8002390:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002394:	e7c4      	b.n	8002320 <__ieee754_rem_pio2+0x80>
 8002396:	a386      	add	r3, pc, #536	; (adr r3, 80025b0 <__ieee754_rem_pio2+0x310>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fe f844 	bl	8000428 <__adddf3>
 80023a0:	a385      	add	r3, pc, #532	; (adr r3, 80025b8 <__ieee754_rem_pio2+0x318>)
 80023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a6:	4604      	mov	r4, r0
 80023a8:	460d      	mov	r5, r1
 80023aa:	f7fe f83d 	bl	8000428 <__adddf3>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	e9ca 2300 	strd	r2, r3, [sl]
 80023b6:	4620      	mov	r0, r4
 80023b8:	4629      	mov	r1, r5
 80023ba:	f7fe f833 	bl	8000424 <__aeabi_dsub>
 80023be:	a37e      	add	r3, pc, #504	; (adr r3, 80025b8 <__ieee754_rem_pio2+0x318>)
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	e7e0      	b.n	8002388 <__ieee754_rem_pio2+0xe8>
 80023c6:	4b87      	ldr	r3, [pc, #540]	; (80025e4 <__ieee754_rem_pio2+0x344>)
 80023c8:	4598      	cmp	r8, r3
 80023ca:	f300 80d9 	bgt.w	8002580 <__ieee754_rem_pio2+0x2e0>
 80023ce:	f000 fe49 	bl	8003064 <fabs>
 80023d2:	ec55 4b10 	vmov	r4, r5, d0
 80023d6:	ee10 0a10 	vmov	r0, s0
 80023da:	a379      	add	r3, pc, #484	; (adr r3, 80025c0 <__ieee754_rem_pio2+0x320>)
 80023dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e0:	4629      	mov	r1, r5
 80023e2:	f7fd fef1 	bl	80001c8 <__aeabi_dmul>
 80023e6:	4b80      	ldr	r3, [pc, #512]	; (80025e8 <__ieee754_rem_pio2+0x348>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	f7fe f81d 	bl	8000428 <__adddf3>
 80023ee:	f7fe fa59 	bl	80008a4 <__aeabi_d2iz>
 80023f2:	4683      	mov	fp, r0
 80023f4:	f7fe f964 	bl	80006c0 <__aeabi_i2d>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	ec43 2b18 	vmov	d8, r2, r3
 8002400:	a367      	add	r3, pc, #412	; (adr r3, 80025a0 <__ieee754_rem_pio2+0x300>)
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	f7fd fedf 	bl	80001c8 <__aeabi_dmul>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4620      	mov	r0, r4
 8002410:	4629      	mov	r1, r5
 8002412:	f7fe f807 	bl	8000424 <__aeabi_dsub>
 8002416:	a364      	add	r3, pc, #400	; (adr r3, 80025a8 <__ieee754_rem_pio2+0x308>)
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	4606      	mov	r6, r0
 800241e:	460f      	mov	r7, r1
 8002420:	ec51 0b18 	vmov	r0, r1, d8
 8002424:	f7fd fed0 	bl	80001c8 <__aeabi_dmul>
 8002428:	f1bb 0f1f 	cmp.w	fp, #31
 800242c:	4604      	mov	r4, r0
 800242e:	460d      	mov	r5, r1
 8002430:	dc0d      	bgt.n	800244e <__ieee754_rem_pio2+0x1ae>
 8002432:	4b6e      	ldr	r3, [pc, #440]	; (80025ec <__ieee754_rem_pio2+0x34c>)
 8002434:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8002438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243c:	4543      	cmp	r3, r8
 800243e:	d006      	beq.n	800244e <__ieee754_rem_pio2+0x1ae>
 8002440:	4622      	mov	r2, r4
 8002442:	462b      	mov	r3, r5
 8002444:	4630      	mov	r0, r6
 8002446:	4639      	mov	r1, r7
 8002448:	f7fd ffec 	bl	8000424 <__aeabi_dsub>
 800244c:	e00f      	b.n	800246e <__ieee754_rem_pio2+0x1ce>
 800244e:	462b      	mov	r3, r5
 8002450:	4622      	mov	r2, r4
 8002452:	4630      	mov	r0, r6
 8002454:	4639      	mov	r1, r7
 8002456:	f7fd ffe5 	bl	8000424 <__aeabi_dsub>
 800245a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800245e:	9303      	str	r3, [sp, #12]
 8002460:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002464:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8002468:	f1b8 0f10 	cmp.w	r8, #16
 800246c:	dc02      	bgt.n	8002474 <__ieee754_rem_pio2+0x1d4>
 800246e:	e9ca 0100 	strd	r0, r1, [sl]
 8002472:	e039      	b.n	80024e8 <__ieee754_rem_pio2+0x248>
 8002474:	a34e      	add	r3, pc, #312	; (adr r3, 80025b0 <__ieee754_rem_pio2+0x310>)
 8002476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247a:	ec51 0b18 	vmov	r0, r1, d8
 800247e:	f7fd fea3 	bl	80001c8 <__aeabi_dmul>
 8002482:	4604      	mov	r4, r0
 8002484:	460d      	mov	r5, r1
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4630      	mov	r0, r6
 800248c:	4639      	mov	r1, r7
 800248e:	f7fd ffc9 	bl	8000424 <__aeabi_dsub>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4680      	mov	r8, r0
 8002498:	4689      	mov	r9, r1
 800249a:	4630      	mov	r0, r6
 800249c:	4639      	mov	r1, r7
 800249e:	f7fd ffc1 	bl	8000424 <__aeabi_dsub>
 80024a2:	4622      	mov	r2, r4
 80024a4:	462b      	mov	r3, r5
 80024a6:	f7fd ffbd 	bl	8000424 <__aeabi_dsub>
 80024aa:	a343      	add	r3, pc, #268	; (adr r3, 80025b8 <__ieee754_rem_pio2+0x318>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	4604      	mov	r4, r0
 80024b2:	460d      	mov	r5, r1
 80024b4:	ec51 0b18 	vmov	r0, r1, d8
 80024b8:	f7fd fe86 	bl	80001c8 <__aeabi_dmul>
 80024bc:	4622      	mov	r2, r4
 80024be:	462b      	mov	r3, r5
 80024c0:	f7fd ffb0 	bl	8000424 <__aeabi_dsub>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4604      	mov	r4, r0
 80024ca:	460d      	mov	r5, r1
 80024cc:	4640      	mov	r0, r8
 80024ce:	4649      	mov	r1, r9
 80024d0:	f7fd ffa8 	bl	8000424 <__aeabi_dsub>
 80024d4:	9a03      	ldr	r2, [sp, #12]
 80024d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b31      	cmp	r3, #49	; 0x31
 80024de:	dc24      	bgt.n	800252a <__ieee754_rem_pio2+0x28a>
 80024e0:	e9ca 0100 	strd	r0, r1, [sl]
 80024e4:	4646      	mov	r6, r8
 80024e6:	464f      	mov	r7, r9
 80024e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80024ec:	4630      	mov	r0, r6
 80024ee:	4642      	mov	r2, r8
 80024f0:	464b      	mov	r3, r9
 80024f2:	4639      	mov	r1, r7
 80024f4:	f7fd ff96 	bl	8000424 <__aeabi_dsub>
 80024f8:	462b      	mov	r3, r5
 80024fa:	4622      	mov	r2, r4
 80024fc:	f7fd ff92 	bl	8000424 <__aeabi_dsub>
 8002500:	9b02      	ldr	r3, [sp, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002508:	f6bf af0a 	bge.w	8002320 <__ieee754_rem_pio2+0x80>
 800250c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002510:	f8ca 3004 	str.w	r3, [sl, #4]
 8002514:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002518:	f8ca 8000 	str.w	r8, [sl]
 800251c:	f8ca 0008 	str.w	r0, [sl, #8]
 8002520:	f8ca 300c 	str.w	r3, [sl, #12]
 8002524:	f1cb 0b00 	rsb	fp, fp, #0
 8002528:	e6fa      	b.n	8002320 <__ieee754_rem_pio2+0x80>
 800252a:	a327      	add	r3, pc, #156	; (adr r3, 80025c8 <__ieee754_rem_pio2+0x328>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	ec51 0b18 	vmov	r0, r1, d8
 8002534:	f7fd fe48 	bl	80001c8 <__aeabi_dmul>
 8002538:	4604      	mov	r4, r0
 800253a:	460d      	mov	r5, r1
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4640      	mov	r0, r8
 8002542:	4649      	mov	r1, r9
 8002544:	f7fd ff6e 	bl	8000424 <__aeabi_dsub>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4606      	mov	r6, r0
 800254e:	460f      	mov	r7, r1
 8002550:	4640      	mov	r0, r8
 8002552:	4649      	mov	r1, r9
 8002554:	f7fd ff66 	bl	8000424 <__aeabi_dsub>
 8002558:	4622      	mov	r2, r4
 800255a:	462b      	mov	r3, r5
 800255c:	f7fd ff62 	bl	8000424 <__aeabi_dsub>
 8002560:	a31b      	add	r3, pc, #108	; (adr r3, 80025d0 <__ieee754_rem_pio2+0x330>)
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	4604      	mov	r4, r0
 8002568:	460d      	mov	r5, r1
 800256a:	ec51 0b18 	vmov	r0, r1, d8
 800256e:	f7fd fe2b 	bl	80001c8 <__aeabi_dmul>
 8002572:	4622      	mov	r2, r4
 8002574:	462b      	mov	r3, r5
 8002576:	f7fd ff55 	bl	8000424 <__aeabi_dsub>
 800257a:	4604      	mov	r4, r0
 800257c:	460d      	mov	r5, r1
 800257e:	e75f      	b.n	8002440 <__ieee754_rem_pio2+0x1a0>
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <__ieee754_rem_pio2+0x350>)
 8002582:	4598      	cmp	r8, r3
 8002584:	dd36      	ble.n	80025f4 <__ieee754_rem_pio2+0x354>
 8002586:	ee10 2a10 	vmov	r2, s0
 800258a:	462b      	mov	r3, r5
 800258c:	4620      	mov	r0, r4
 800258e:	4629      	mov	r1, r5
 8002590:	f7fd ff48 	bl	8000424 <__aeabi_dsub>
 8002594:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002598:	e9ca 0100 	strd	r0, r1, [sl]
 800259c:	e694      	b.n	80022c8 <__ieee754_rem_pio2+0x28>
 800259e:	bf00      	nop
 80025a0:	54400000 	.word	0x54400000
 80025a4:	3ff921fb 	.word	0x3ff921fb
 80025a8:	1a626331 	.word	0x1a626331
 80025ac:	3dd0b461 	.word	0x3dd0b461
 80025b0:	1a600000 	.word	0x1a600000
 80025b4:	3dd0b461 	.word	0x3dd0b461
 80025b8:	2e037073 	.word	0x2e037073
 80025bc:	3ba3198a 	.word	0x3ba3198a
 80025c0:	6dc9c883 	.word	0x6dc9c883
 80025c4:	3fe45f30 	.word	0x3fe45f30
 80025c8:	2e000000 	.word	0x2e000000
 80025cc:	3ba3198a 	.word	0x3ba3198a
 80025d0:	252049c1 	.word	0x252049c1
 80025d4:	397b839a 	.word	0x397b839a
 80025d8:	3fe921fb 	.word	0x3fe921fb
 80025dc:	4002d97b 	.word	0x4002d97b
 80025e0:	3ff921fb 	.word	0x3ff921fb
 80025e4:	413921fb 	.word	0x413921fb
 80025e8:	3fe00000 	.word	0x3fe00000
 80025ec:	080032b0 	.word	0x080032b0
 80025f0:	7fefffff 	.word	0x7fefffff
 80025f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80025f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80025fc:	ee10 0a10 	vmov	r0, s0
 8002600:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8002604:	ee10 6a10 	vmov	r6, s0
 8002608:	460f      	mov	r7, r1
 800260a:	f7fe f94b 	bl	80008a4 <__aeabi_d2iz>
 800260e:	f7fe f857 	bl	80006c0 <__aeabi_i2d>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4630      	mov	r0, r6
 8002618:	4639      	mov	r1, r7
 800261a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800261e:	f7fd ff01 	bl	8000424 <__aeabi_dsub>
 8002622:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <__ieee754_rem_pio2+0x410>)
 8002624:	2200      	movs	r2, #0
 8002626:	f7fd fdcf 	bl	80001c8 <__aeabi_dmul>
 800262a:	460f      	mov	r7, r1
 800262c:	4606      	mov	r6, r0
 800262e:	f7fe f939 	bl	80008a4 <__aeabi_d2iz>
 8002632:	f7fe f845 	bl	80006c0 <__aeabi_i2d>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4630      	mov	r0, r6
 800263c:	4639      	mov	r1, r7
 800263e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002642:	f7fd feef 	bl	8000424 <__aeabi_dsub>
 8002646:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <__ieee754_rem_pio2+0x410>)
 8002648:	2200      	movs	r2, #0
 800264a:	f7fd fdbd 	bl	80001c8 <__aeabi_dmul>
 800264e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002652:	ad04      	add	r5, sp, #16
 8002654:	f04f 0803 	mov.w	r8, #3
 8002658:	46a9      	mov	r9, r5
 800265a:	2600      	movs	r6, #0
 800265c:	2700      	movs	r7, #0
 800265e:	4632      	mov	r2, r6
 8002660:	463b      	mov	r3, r7
 8002662:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8002666:	46c3      	mov	fp, r8
 8002668:	3d08      	subs	r5, #8
 800266a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800266e:	f7fe f8e7 	bl	8000840 <__aeabi_dcmpeq>
 8002672:	2800      	cmp	r0, #0
 8002674:	d1f3      	bne.n	800265e <__ieee754_rem_pio2+0x3be>
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <__ieee754_rem_pio2+0x414>)
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	2302      	movs	r3, #2
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	4622      	mov	r2, r4
 8002680:	465b      	mov	r3, fp
 8002682:	4651      	mov	r1, sl
 8002684:	4648      	mov	r0, r9
 8002686:	f000 f8df 	bl	8002848 <__kernel_rem_pio2>
 800268a:	9b02      	ldr	r3, [sp, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	4683      	mov	fp, r0
 8002690:	f6bf ae46 	bge.w	8002320 <__ieee754_rem_pio2+0x80>
 8002694:	e9da 2100 	ldrd	r2, r1, [sl]
 8002698:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800269c:	e9ca 2300 	strd	r2, r3, [sl]
 80026a0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80026a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80026a8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80026ac:	e73a      	b.n	8002524 <__ieee754_rem_pio2+0x284>
 80026ae:	bf00      	nop
 80026b0:	41700000 	.word	0x41700000
 80026b4:	08003330 	.word	0x08003330

080026b8 <__kernel_cos>:
 80026b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026bc:	ec57 6b10 	vmov	r6, r7, d0
 80026c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80026c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80026c8:	ed8d 1b00 	vstr	d1, [sp]
 80026cc:	da07      	bge.n	80026de <__kernel_cos+0x26>
 80026ce:	ee10 0a10 	vmov	r0, s0
 80026d2:	4639      	mov	r1, r7
 80026d4:	f7fe f8e6 	bl	80008a4 <__aeabi_d2iz>
 80026d8:	2800      	cmp	r0, #0
 80026da:	f000 8088 	beq.w	80027ee <__kernel_cos+0x136>
 80026de:	4632      	mov	r2, r6
 80026e0:	463b      	mov	r3, r7
 80026e2:	4630      	mov	r0, r6
 80026e4:	4639      	mov	r1, r7
 80026e6:	f7fd fd6f 	bl	80001c8 <__aeabi_dmul>
 80026ea:	4b51      	ldr	r3, [pc, #324]	; (8002830 <__kernel_cos+0x178>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	4604      	mov	r4, r0
 80026f0:	460d      	mov	r5, r1
 80026f2:	f7fd fd69 	bl	80001c8 <__aeabi_dmul>
 80026f6:	a340      	add	r3, pc, #256	; (adr r3, 80027f8 <__kernel_cos+0x140>)
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	4682      	mov	sl, r0
 80026fe:	468b      	mov	fp, r1
 8002700:	4620      	mov	r0, r4
 8002702:	4629      	mov	r1, r5
 8002704:	f7fd fd60 	bl	80001c8 <__aeabi_dmul>
 8002708:	a33d      	add	r3, pc, #244	; (adr r3, 8002800 <__kernel_cos+0x148>)
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	f7fd fe8b 	bl	8000428 <__adddf3>
 8002712:	4622      	mov	r2, r4
 8002714:	462b      	mov	r3, r5
 8002716:	f7fd fd57 	bl	80001c8 <__aeabi_dmul>
 800271a:	a33b      	add	r3, pc, #236	; (adr r3, 8002808 <__kernel_cos+0x150>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	f7fd fe80 	bl	8000424 <__aeabi_dsub>
 8002724:	4622      	mov	r2, r4
 8002726:	462b      	mov	r3, r5
 8002728:	f7fd fd4e 	bl	80001c8 <__aeabi_dmul>
 800272c:	a338      	add	r3, pc, #224	; (adr r3, 8002810 <__kernel_cos+0x158>)
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	f7fd fe79 	bl	8000428 <__adddf3>
 8002736:	4622      	mov	r2, r4
 8002738:	462b      	mov	r3, r5
 800273a:	f7fd fd45 	bl	80001c8 <__aeabi_dmul>
 800273e:	a336      	add	r3, pc, #216	; (adr r3, 8002818 <__kernel_cos+0x160>)
 8002740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002744:	f7fd fe6e 	bl	8000424 <__aeabi_dsub>
 8002748:	4622      	mov	r2, r4
 800274a:	462b      	mov	r3, r5
 800274c:	f7fd fd3c 	bl	80001c8 <__aeabi_dmul>
 8002750:	a333      	add	r3, pc, #204	; (adr r3, 8002820 <__kernel_cos+0x168>)
 8002752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002756:	f7fd fe67 	bl	8000428 <__adddf3>
 800275a:	4622      	mov	r2, r4
 800275c:	462b      	mov	r3, r5
 800275e:	f7fd fd33 	bl	80001c8 <__aeabi_dmul>
 8002762:	4622      	mov	r2, r4
 8002764:	462b      	mov	r3, r5
 8002766:	f7fd fd2f 	bl	80001c8 <__aeabi_dmul>
 800276a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800276e:	4604      	mov	r4, r0
 8002770:	460d      	mov	r5, r1
 8002772:	4630      	mov	r0, r6
 8002774:	4639      	mov	r1, r7
 8002776:	f7fd fd27 	bl	80001c8 <__aeabi_dmul>
 800277a:	460b      	mov	r3, r1
 800277c:	4602      	mov	r2, r0
 800277e:	4629      	mov	r1, r5
 8002780:	4620      	mov	r0, r4
 8002782:	f7fd fe4f 	bl	8000424 <__aeabi_dsub>
 8002786:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <__kernel_cos+0x17c>)
 8002788:	4598      	cmp	r8, r3
 800278a:	4606      	mov	r6, r0
 800278c:	460f      	mov	r7, r1
 800278e:	dc10      	bgt.n	80027b2 <__kernel_cos+0xfa>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4650      	mov	r0, sl
 8002796:	4659      	mov	r1, fp
 8002798:	f7fd fe44 	bl	8000424 <__aeabi_dsub>
 800279c:	460b      	mov	r3, r1
 800279e:	4926      	ldr	r1, [pc, #152]	; (8002838 <__kernel_cos+0x180>)
 80027a0:	4602      	mov	r2, r0
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7fd fe3e 	bl	8000424 <__aeabi_dsub>
 80027a8:	ec41 0b10 	vmov	d0, r0, r1
 80027ac:	b003      	add	sp, #12
 80027ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <__kernel_cos+0x184>)
 80027b4:	4920      	ldr	r1, [pc, #128]	; (8002838 <__kernel_cos+0x180>)
 80027b6:	4598      	cmp	r8, r3
 80027b8:	bfcc      	ite	gt
 80027ba:	4d21      	ldrgt	r5, [pc, #132]	; (8002840 <__kernel_cos+0x188>)
 80027bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80027c0:	2400      	movs	r4, #0
 80027c2:	4622      	mov	r2, r4
 80027c4:	462b      	mov	r3, r5
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7fd fe2c 	bl	8000424 <__aeabi_dsub>
 80027cc:	4622      	mov	r2, r4
 80027ce:	4680      	mov	r8, r0
 80027d0:	4689      	mov	r9, r1
 80027d2:	462b      	mov	r3, r5
 80027d4:	4650      	mov	r0, sl
 80027d6:	4659      	mov	r1, fp
 80027d8:	f7fd fe24 	bl	8000424 <__aeabi_dsub>
 80027dc:	4632      	mov	r2, r6
 80027de:	463b      	mov	r3, r7
 80027e0:	f7fd fe20 	bl	8000424 <__aeabi_dsub>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4640      	mov	r0, r8
 80027ea:	4649      	mov	r1, r9
 80027ec:	e7da      	b.n	80027a4 <__kernel_cos+0xec>
 80027ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002828 <__kernel_cos+0x170>
 80027f2:	e7db      	b.n	80027ac <__kernel_cos+0xf4>
 80027f4:	f3af 8000 	nop.w
 80027f8:	be8838d4 	.word	0xbe8838d4
 80027fc:	bda8fae9 	.word	0xbda8fae9
 8002800:	bdb4b1c4 	.word	0xbdb4b1c4
 8002804:	3e21ee9e 	.word	0x3e21ee9e
 8002808:	809c52ad 	.word	0x809c52ad
 800280c:	3e927e4f 	.word	0x3e927e4f
 8002810:	19cb1590 	.word	0x19cb1590
 8002814:	3efa01a0 	.word	0x3efa01a0
 8002818:	16c15177 	.word	0x16c15177
 800281c:	3f56c16c 	.word	0x3f56c16c
 8002820:	5555554c 	.word	0x5555554c
 8002824:	3fa55555 	.word	0x3fa55555
 8002828:	00000000 	.word	0x00000000
 800282c:	3ff00000 	.word	0x3ff00000
 8002830:	3fe00000 	.word	0x3fe00000
 8002834:	3fd33332 	.word	0x3fd33332
 8002838:	3ff00000 	.word	0x3ff00000
 800283c:	3fe90000 	.word	0x3fe90000
 8002840:	3fd20000 	.word	0x3fd20000
 8002844:	00000000 	.word	0x00000000

08002848 <__kernel_rem_pio2>:
 8002848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284c:	ed2d 8b02 	vpush	{d8}
 8002850:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8002854:	f112 0f14 	cmn.w	r2, #20
 8002858:	9308      	str	r3, [sp, #32]
 800285a:	9101      	str	r1, [sp, #4]
 800285c:	4bc4      	ldr	r3, [pc, #784]	; (8002b70 <__kernel_rem_pio2+0x328>)
 800285e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8002860:	900b      	str	r0, [sp, #44]	; 0x2c
 8002862:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002866:	9302      	str	r3, [sp, #8]
 8002868:	9b08      	ldr	r3, [sp, #32]
 800286a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800286e:	bfa8      	it	ge
 8002870:	1ed4      	subge	r4, r2, #3
 8002872:	9306      	str	r3, [sp, #24]
 8002874:	bfb2      	itee	lt
 8002876:	2400      	movlt	r4, #0
 8002878:	2318      	movge	r3, #24
 800287a:	fb94 f4f3 	sdivge	r4, r4, r3
 800287e:	f06f 0317 	mvn.w	r3, #23
 8002882:	fb04 3303 	mla	r3, r4, r3, r3
 8002886:	eb03 0a02 	add.w	sl, r3, r2
 800288a:	9b02      	ldr	r3, [sp, #8]
 800288c:	9a06      	ldr	r2, [sp, #24]
 800288e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8002b60 <__kernel_rem_pio2+0x318>
 8002892:	eb03 0802 	add.w	r8, r3, r2
 8002896:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8002898:	1aa7      	subs	r7, r4, r2
 800289a:	ae22      	add	r6, sp, #136	; 0x88
 800289c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80028a0:	2500      	movs	r5, #0
 80028a2:	4545      	cmp	r5, r8
 80028a4:	dd13      	ble.n	80028ce <__kernel_rem_pio2+0x86>
 80028a6:	9b08      	ldr	r3, [sp, #32]
 80028a8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8002b60 <__kernel_rem_pio2+0x318>
 80028ac:	aa22      	add	r2, sp, #136	; 0x88
 80028ae:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80028b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80028b6:	f04f 0800 	mov.w	r8, #0
 80028ba:	9b02      	ldr	r3, [sp, #8]
 80028bc:	4598      	cmp	r8, r3
 80028be:	dc2f      	bgt.n	8002920 <__kernel_rem_pio2+0xd8>
 80028c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80028c4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80028c8:	462f      	mov	r7, r5
 80028ca:	2600      	movs	r6, #0
 80028cc:	e01b      	b.n	8002906 <__kernel_rem_pio2+0xbe>
 80028ce:	42ef      	cmn	r7, r5
 80028d0:	d407      	bmi.n	80028e2 <__kernel_rem_pio2+0x9a>
 80028d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80028d6:	f7fd fef3 	bl	80006c0 <__aeabi_i2d>
 80028da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80028de:	3501      	adds	r5, #1
 80028e0:	e7df      	b.n	80028a2 <__kernel_rem_pio2+0x5a>
 80028e2:	ec51 0b18 	vmov	r0, r1, d8
 80028e6:	e7f8      	b.n	80028da <__kernel_rem_pio2+0x92>
 80028e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80028f0:	f7fd fc6a 	bl	80001c8 <__aeabi_dmul>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80028fc:	f7fd fd94 	bl	8000428 <__adddf3>
 8002900:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002904:	3601      	adds	r6, #1
 8002906:	9b06      	ldr	r3, [sp, #24]
 8002908:	429e      	cmp	r6, r3
 800290a:	f1a7 0708 	sub.w	r7, r7, #8
 800290e:	ddeb      	ble.n	80028e8 <__kernel_rem_pio2+0xa0>
 8002910:	ed9d 7b04 	vldr	d7, [sp, #16]
 8002914:	f108 0801 	add.w	r8, r8, #1
 8002918:	ecab 7b02 	vstmia	fp!, {d7}
 800291c:	3508      	adds	r5, #8
 800291e:	e7cc      	b.n	80028ba <__kernel_rem_pio2+0x72>
 8002920:	9b02      	ldr	r3, [sp, #8]
 8002922:	aa0e      	add	r2, sp, #56	; 0x38
 8002924:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002928:	930d      	str	r3, [sp, #52]	; 0x34
 800292a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800292c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002930:	9c02      	ldr	r4, [sp, #8]
 8002932:	930c      	str	r3, [sp, #48]	; 0x30
 8002934:	00e3      	lsls	r3, r4, #3
 8002936:	930a      	str	r3, [sp, #40]	; 0x28
 8002938:	ab9a      	add	r3, sp, #616	; 0x268
 800293a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800293e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8002942:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8002946:	ab72      	add	r3, sp, #456	; 0x1c8
 8002948:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800294c:	46c3      	mov	fp, r8
 800294e:	46a1      	mov	r9, r4
 8002950:	f1b9 0f00 	cmp.w	r9, #0
 8002954:	f1a5 0508 	sub.w	r5, r5, #8
 8002958:	dc77      	bgt.n	8002a4a <__kernel_rem_pio2+0x202>
 800295a:	ec47 6b10 	vmov	d0, r6, r7
 800295e:	4650      	mov	r0, sl
 8002960:	f000 fc0a 	bl	8003178 <scalbn>
 8002964:	ec57 6b10 	vmov	r6, r7, d0
 8002968:	2200      	movs	r2, #0
 800296a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800296e:	ee10 0a10 	vmov	r0, s0
 8002972:	4639      	mov	r1, r7
 8002974:	f7fd fc28 	bl	80001c8 <__aeabi_dmul>
 8002978:	ec41 0b10 	vmov	d0, r0, r1
 800297c:	f000 fb7c 	bl	8003078 <floor>
 8002980:	4b7c      	ldr	r3, [pc, #496]	; (8002b74 <__kernel_rem_pio2+0x32c>)
 8002982:	ec51 0b10 	vmov	r0, r1, d0
 8002986:	2200      	movs	r2, #0
 8002988:	f7fd fc1e 	bl	80001c8 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4630      	mov	r0, r6
 8002992:	4639      	mov	r1, r7
 8002994:	f7fd fd46 	bl	8000424 <__aeabi_dsub>
 8002998:	460f      	mov	r7, r1
 800299a:	4606      	mov	r6, r0
 800299c:	f7fd ff82 	bl	80008a4 <__aeabi_d2iz>
 80029a0:	9004      	str	r0, [sp, #16]
 80029a2:	f7fd fe8d 	bl	80006c0 <__aeabi_i2d>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4630      	mov	r0, r6
 80029ac:	4639      	mov	r1, r7
 80029ae:	f7fd fd39 	bl	8000424 <__aeabi_dsub>
 80029b2:	f1ba 0f00 	cmp.w	sl, #0
 80029b6:	4606      	mov	r6, r0
 80029b8:	460f      	mov	r7, r1
 80029ba:	dd6d      	ble.n	8002a98 <__kernel_rem_pio2+0x250>
 80029bc:	1e62      	subs	r2, r4, #1
 80029be:	ab0e      	add	r3, sp, #56	; 0x38
 80029c0:	9d04      	ldr	r5, [sp, #16]
 80029c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80029c6:	f1ca 0118 	rsb	r1, sl, #24
 80029ca:	fa40 f301 	asr.w	r3, r0, r1
 80029ce:	441d      	add	r5, r3
 80029d0:	408b      	lsls	r3, r1
 80029d2:	1ac0      	subs	r0, r0, r3
 80029d4:	ab0e      	add	r3, sp, #56	; 0x38
 80029d6:	9504      	str	r5, [sp, #16]
 80029d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80029dc:	f1ca 0317 	rsb	r3, sl, #23
 80029e0:	fa40 fb03 	asr.w	fp, r0, r3
 80029e4:	f1bb 0f00 	cmp.w	fp, #0
 80029e8:	dd65      	ble.n	8002ab6 <__kernel_rem_pio2+0x26e>
 80029ea:	9b04      	ldr	r3, [sp, #16]
 80029ec:	2200      	movs	r2, #0
 80029ee:	3301      	adds	r3, #1
 80029f0:	9304      	str	r3, [sp, #16]
 80029f2:	4615      	mov	r5, r2
 80029f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80029f8:	4294      	cmp	r4, r2
 80029fa:	f300 809c 	bgt.w	8002b36 <__kernel_rem_pio2+0x2ee>
 80029fe:	f1ba 0f00 	cmp.w	sl, #0
 8002a02:	dd07      	ble.n	8002a14 <__kernel_rem_pio2+0x1cc>
 8002a04:	f1ba 0f01 	cmp.w	sl, #1
 8002a08:	f000 80c0 	beq.w	8002b8c <__kernel_rem_pio2+0x344>
 8002a0c:	f1ba 0f02 	cmp.w	sl, #2
 8002a10:	f000 80c6 	beq.w	8002ba0 <__kernel_rem_pio2+0x358>
 8002a14:	f1bb 0f02 	cmp.w	fp, #2
 8002a18:	d14d      	bne.n	8002ab6 <__kernel_rem_pio2+0x26e>
 8002a1a:	4632      	mov	r2, r6
 8002a1c:	463b      	mov	r3, r7
 8002a1e:	4956      	ldr	r1, [pc, #344]	; (8002b78 <__kernel_rem_pio2+0x330>)
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7fd fcff 	bl	8000424 <__aeabi_dsub>
 8002a26:	4606      	mov	r6, r0
 8002a28:	460f      	mov	r7, r1
 8002a2a:	2d00      	cmp	r5, #0
 8002a2c:	d043      	beq.n	8002ab6 <__kernel_rem_pio2+0x26e>
 8002a2e:	4650      	mov	r0, sl
 8002a30:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8002b68 <__kernel_rem_pio2+0x320>
 8002a34:	f000 fba0 	bl	8003178 <scalbn>
 8002a38:	4630      	mov	r0, r6
 8002a3a:	4639      	mov	r1, r7
 8002a3c:	ec53 2b10 	vmov	r2, r3, d0
 8002a40:	f7fd fcf0 	bl	8000424 <__aeabi_dsub>
 8002a44:	4606      	mov	r6, r0
 8002a46:	460f      	mov	r7, r1
 8002a48:	e035      	b.n	8002ab6 <__kernel_rem_pio2+0x26e>
 8002a4a:	4b4c      	ldr	r3, [pc, #304]	; (8002b7c <__kernel_rem_pio2+0x334>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	4630      	mov	r0, r6
 8002a50:	4639      	mov	r1, r7
 8002a52:	f7fd fbb9 	bl	80001c8 <__aeabi_dmul>
 8002a56:	f7fd ff25 	bl	80008a4 <__aeabi_d2iz>
 8002a5a:	f7fd fe31 	bl	80006c0 <__aeabi_i2d>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	ec43 2b18 	vmov	d8, r2, r3
 8002a66:	4b46      	ldr	r3, [pc, #280]	; (8002b80 <__kernel_rem_pio2+0x338>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f7fd fbad 	bl	80001c8 <__aeabi_dmul>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4630      	mov	r0, r6
 8002a74:	4639      	mov	r1, r7
 8002a76:	f7fd fcd5 	bl	8000424 <__aeabi_dsub>
 8002a7a:	f7fd ff13 	bl	80008a4 <__aeabi_d2iz>
 8002a7e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002a82:	f84b 0b04 	str.w	r0, [fp], #4
 8002a86:	ec51 0b18 	vmov	r0, r1, d8
 8002a8a:	f7fd fccd 	bl	8000428 <__adddf3>
 8002a8e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002a92:	4606      	mov	r6, r0
 8002a94:	460f      	mov	r7, r1
 8002a96:	e75b      	b.n	8002950 <__kernel_rem_pio2+0x108>
 8002a98:	d106      	bne.n	8002aa8 <__kernel_rem_pio2+0x260>
 8002a9a:	1e63      	subs	r3, r4, #1
 8002a9c:	aa0e      	add	r2, sp, #56	; 0x38
 8002a9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002aa2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8002aa6:	e79d      	b.n	80029e4 <__kernel_rem_pio2+0x19c>
 8002aa8:	4b36      	ldr	r3, [pc, #216]	; (8002b84 <__kernel_rem_pio2+0x33c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f7fd fee6 	bl	800087c <__aeabi_dcmpge>
 8002ab0:	2800      	cmp	r0, #0
 8002ab2:	d13d      	bne.n	8002b30 <__kernel_rem_pio2+0x2e8>
 8002ab4:	4683      	mov	fp, r0
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2300      	movs	r3, #0
 8002aba:	4630      	mov	r0, r6
 8002abc:	4639      	mov	r1, r7
 8002abe:	f7fd febf 	bl	8000840 <__aeabi_dcmpeq>
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	f000 80c0 	beq.w	8002c48 <__kernel_rem_pio2+0x400>
 8002ac8:	1e65      	subs	r5, r4, #1
 8002aca:	462b      	mov	r3, r5
 8002acc:	2200      	movs	r2, #0
 8002ace:	9902      	ldr	r1, [sp, #8]
 8002ad0:	428b      	cmp	r3, r1
 8002ad2:	da6c      	bge.n	8002bae <__kernel_rem_pio2+0x366>
 8002ad4:	2a00      	cmp	r2, #0
 8002ad6:	f000 8089 	beq.w	8002bec <__kernel_rem_pio2+0x3a4>
 8002ada:	ab0e      	add	r3, sp, #56	; 0x38
 8002adc:	f1aa 0a18 	sub.w	sl, sl, #24
 8002ae0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 80ad 	beq.w	8002c44 <__kernel_rem_pio2+0x3fc>
 8002aea:	4650      	mov	r0, sl
 8002aec:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8002b68 <__kernel_rem_pio2+0x320>
 8002af0:	f000 fb42 	bl	8003178 <scalbn>
 8002af4:	ab9a      	add	r3, sp, #616	; 0x268
 8002af6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002afa:	ec57 6b10 	vmov	r6, r7, d0
 8002afe:	00ec      	lsls	r4, r5, #3
 8002b00:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8002b04:	46aa      	mov	sl, r5
 8002b06:	f1ba 0f00 	cmp.w	sl, #0
 8002b0a:	f280 80d6 	bge.w	8002cba <__kernel_rem_pio2+0x472>
 8002b0e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8002b60 <__kernel_rem_pio2+0x318>
 8002b12:	462e      	mov	r6, r5
 8002b14:	2e00      	cmp	r6, #0
 8002b16:	f2c0 8104 	blt.w	8002d22 <__kernel_rem_pio2+0x4da>
 8002b1a:	ab72      	add	r3, sp, #456	; 0x1c8
 8002b1c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8002b20:	f8df a064 	ldr.w	sl, [pc, #100]	; 8002b88 <__kernel_rem_pio2+0x340>
 8002b24:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8002b28:	f04f 0800 	mov.w	r8, #0
 8002b2c:	1baf      	subs	r7, r5, r6
 8002b2e:	e0ea      	b.n	8002d06 <__kernel_rem_pio2+0x4be>
 8002b30:	f04f 0b02 	mov.w	fp, #2
 8002b34:	e759      	b.n	80029ea <__kernel_rem_pio2+0x1a2>
 8002b36:	f8d8 3000 	ldr.w	r3, [r8]
 8002b3a:	b955      	cbnz	r5, 8002b52 <__kernel_rem_pio2+0x30a>
 8002b3c:	b123      	cbz	r3, 8002b48 <__kernel_rem_pio2+0x300>
 8002b3e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8002b42:	f8c8 3000 	str.w	r3, [r8]
 8002b46:	2301      	movs	r3, #1
 8002b48:	3201      	adds	r2, #1
 8002b4a:	f108 0804 	add.w	r8, r8, #4
 8002b4e:	461d      	mov	r5, r3
 8002b50:	e752      	b.n	80029f8 <__kernel_rem_pio2+0x1b0>
 8002b52:	1acb      	subs	r3, r1, r3
 8002b54:	f8c8 3000 	str.w	r3, [r8]
 8002b58:	462b      	mov	r3, r5
 8002b5a:	e7f5      	b.n	8002b48 <__kernel_rem_pio2+0x300>
 8002b5c:	f3af 8000 	nop.w
	...
 8002b6c:	3ff00000 	.word	0x3ff00000
 8002b70:	08003478 	.word	0x08003478
 8002b74:	40200000 	.word	0x40200000
 8002b78:	3ff00000 	.word	0x3ff00000
 8002b7c:	3e700000 	.word	0x3e700000
 8002b80:	41700000 	.word	0x41700000
 8002b84:	3fe00000 	.word	0x3fe00000
 8002b88:	08003438 	.word	0x08003438
 8002b8c:	1e62      	subs	r2, r4, #1
 8002b8e:	ab0e      	add	r3, sp, #56	; 0x38
 8002b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b94:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002b98:	a90e      	add	r1, sp, #56	; 0x38
 8002b9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8002b9e:	e739      	b.n	8002a14 <__kernel_rem_pio2+0x1cc>
 8002ba0:	1e62      	subs	r2, r4, #1
 8002ba2:	ab0e      	add	r3, sp, #56	; 0x38
 8002ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002bac:	e7f4      	b.n	8002b98 <__kernel_rem_pio2+0x350>
 8002bae:	a90e      	add	r1, sp, #56	; 0x38
 8002bb0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	e789      	b.n	8002ace <__kernel_rem_pio2+0x286>
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8002bc0:	2900      	cmp	r1, #0
 8002bc2:	d0fa      	beq.n	8002bba <__kernel_rem_pio2+0x372>
 8002bc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002bc6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8002bca:	446a      	add	r2, sp
 8002bcc:	3a98      	subs	r2, #152	; 0x98
 8002bce:	920a      	str	r2, [sp, #40]	; 0x28
 8002bd0:	9a08      	ldr	r2, [sp, #32]
 8002bd2:	18e3      	adds	r3, r4, r3
 8002bd4:	18a5      	adds	r5, r4, r2
 8002bd6:	aa22      	add	r2, sp, #136	; 0x88
 8002bd8:	f104 0801 	add.w	r8, r4, #1
 8002bdc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8002be0:	9304      	str	r3, [sp, #16]
 8002be2:	9b04      	ldr	r3, [sp, #16]
 8002be4:	4543      	cmp	r3, r8
 8002be6:	da04      	bge.n	8002bf2 <__kernel_rem_pio2+0x3aa>
 8002be8:	461c      	mov	r4, r3
 8002bea:	e6a3      	b.n	8002934 <__kernel_rem_pio2+0xec>
 8002bec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e7e4      	b.n	8002bbc <__kernel_rem_pio2+0x374>
 8002bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002bf4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8002bf8:	f7fd fd62 	bl	80006c0 <__aeabi_i2d>
 8002bfc:	e8e5 0102 	strd	r0, r1, [r5], #8
 8002c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c02:	46ab      	mov	fp, r5
 8002c04:	461c      	mov	r4, r3
 8002c06:	f04f 0900 	mov.w	r9, #0
 8002c0a:	2600      	movs	r6, #0
 8002c0c:	2700      	movs	r7, #0
 8002c0e:	9b06      	ldr	r3, [sp, #24]
 8002c10:	4599      	cmp	r9, r3
 8002c12:	dd06      	ble.n	8002c22 <__kernel_rem_pio2+0x3da>
 8002c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c16:	e8e3 6702 	strd	r6, r7, [r3], #8
 8002c1a:	f108 0801 	add.w	r8, r8, #1
 8002c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8002c20:	e7df      	b.n	8002be2 <__kernel_rem_pio2+0x39a>
 8002c22:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8002c26:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8002c2a:	f7fd facd 	bl	80001c8 <__aeabi_dmul>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4630      	mov	r0, r6
 8002c34:	4639      	mov	r1, r7
 8002c36:	f7fd fbf7 	bl	8000428 <__adddf3>
 8002c3a:	f109 0901 	add.w	r9, r9, #1
 8002c3e:	4606      	mov	r6, r0
 8002c40:	460f      	mov	r7, r1
 8002c42:	e7e4      	b.n	8002c0e <__kernel_rem_pio2+0x3c6>
 8002c44:	3d01      	subs	r5, #1
 8002c46:	e748      	b.n	8002ada <__kernel_rem_pio2+0x292>
 8002c48:	ec47 6b10 	vmov	d0, r6, r7
 8002c4c:	f1ca 0000 	rsb	r0, sl, #0
 8002c50:	f000 fa92 	bl	8003178 <scalbn>
 8002c54:	ec57 6b10 	vmov	r6, r7, d0
 8002c58:	4ba0      	ldr	r3, [pc, #640]	; (8002edc <__kernel_rem_pio2+0x694>)
 8002c5a:	ee10 0a10 	vmov	r0, s0
 8002c5e:	2200      	movs	r2, #0
 8002c60:	4639      	mov	r1, r7
 8002c62:	f7fd fe0b 	bl	800087c <__aeabi_dcmpge>
 8002c66:	b1f8      	cbz	r0, 8002ca8 <__kernel_rem_pio2+0x460>
 8002c68:	4b9d      	ldr	r3, [pc, #628]	; (8002ee0 <__kernel_rem_pio2+0x698>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	4639      	mov	r1, r7
 8002c70:	f7fd faaa 	bl	80001c8 <__aeabi_dmul>
 8002c74:	f7fd fe16 	bl	80008a4 <__aeabi_d2iz>
 8002c78:	4680      	mov	r8, r0
 8002c7a:	f7fd fd21 	bl	80006c0 <__aeabi_i2d>
 8002c7e:	4b97      	ldr	r3, [pc, #604]	; (8002edc <__kernel_rem_pio2+0x694>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	f7fd faa1 	bl	80001c8 <__aeabi_dmul>
 8002c86:	460b      	mov	r3, r1
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4639      	mov	r1, r7
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	f7fd fbc9 	bl	8000424 <__aeabi_dsub>
 8002c92:	f7fd fe07 	bl	80008a4 <__aeabi_d2iz>
 8002c96:	1c65      	adds	r5, r4, #1
 8002c98:	ab0e      	add	r3, sp, #56	; 0x38
 8002c9a:	f10a 0a18 	add.w	sl, sl, #24
 8002c9e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8002ca2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8002ca6:	e720      	b.n	8002aea <__kernel_rem_pio2+0x2a2>
 8002ca8:	4630      	mov	r0, r6
 8002caa:	4639      	mov	r1, r7
 8002cac:	f7fd fdfa 	bl	80008a4 <__aeabi_d2iz>
 8002cb0:	ab0e      	add	r3, sp, #56	; 0x38
 8002cb2:	4625      	mov	r5, r4
 8002cb4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8002cb8:	e717      	b.n	8002aea <__kernel_rem_pio2+0x2a2>
 8002cba:	ab0e      	add	r3, sp, #56	; 0x38
 8002cbc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8002cc0:	f7fd fcfe 	bl	80006c0 <__aeabi_i2d>
 8002cc4:	4632      	mov	r2, r6
 8002cc6:	463b      	mov	r3, r7
 8002cc8:	f7fd fa7e 	bl	80001c8 <__aeabi_dmul>
 8002ccc:	4b84      	ldr	r3, [pc, #528]	; (8002ee0 <__kernel_rem_pio2+0x698>)
 8002cce:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	4630      	mov	r0, r6
 8002cd6:	4639      	mov	r1, r7
 8002cd8:	f7fd fa76 	bl	80001c8 <__aeabi_dmul>
 8002cdc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002ce0:	4606      	mov	r6, r0
 8002ce2:	460f      	mov	r7, r1
 8002ce4:	e70f      	b.n	8002b06 <__kernel_rem_pio2+0x2be>
 8002ce6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8002cea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8002cee:	f7fd fa6b 	bl	80001c8 <__aeabi_dmul>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002cfa:	f7fd fb95 	bl	8000428 <__adddf3>
 8002cfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002d02:	f108 0801 	add.w	r8, r8, #1
 8002d06:	9b02      	ldr	r3, [sp, #8]
 8002d08:	4598      	cmp	r8, r3
 8002d0a:	dc01      	bgt.n	8002d10 <__kernel_rem_pio2+0x4c8>
 8002d0c:	45b8      	cmp	r8, r7
 8002d0e:	ddea      	ble.n	8002ce6 <__kernel_rem_pio2+0x49e>
 8002d10:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002d14:	ab4a      	add	r3, sp, #296	; 0x128
 8002d16:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8002d1a:	ed87 7b00 	vstr	d7, [r7]
 8002d1e:	3e01      	subs	r6, #1
 8002d20:	e6f8      	b.n	8002b14 <__kernel_rem_pio2+0x2cc>
 8002d22:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	dc0b      	bgt.n	8002d40 <__kernel_rem_pio2+0x4f8>
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	dc35      	bgt.n	8002d98 <__kernel_rem_pio2+0x550>
 8002d2c:	d059      	beq.n	8002de2 <__kernel_rem_pio2+0x59a>
 8002d2e:	9b04      	ldr	r3, [sp, #16]
 8002d30:	f003 0007 	and.w	r0, r3, #7
 8002d34:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8002d38:	ecbd 8b02 	vpop	{d8}
 8002d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d40:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d1f3      	bne.n	8002d2e <__kernel_rem_pio2+0x4e6>
 8002d46:	ab4a      	add	r3, sp, #296	; 0x128
 8002d48:	4423      	add	r3, r4
 8002d4a:	9306      	str	r3, [sp, #24]
 8002d4c:	461c      	mov	r4, r3
 8002d4e:	469a      	mov	sl, r3
 8002d50:	9502      	str	r5, [sp, #8]
 8002d52:	9b02      	ldr	r3, [sp, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f1aa 0a08 	sub.w	sl, sl, #8
 8002d5a:	dc6b      	bgt.n	8002e34 <__kernel_rem_pio2+0x5ec>
 8002d5c:	46aa      	mov	sl, r5
 8002d5e:	f1ba 0f01 	cmp.w	sl, #1
 8002d62:	f1a4 0408 	sub.w	r4, r4, #8
 8002d66:	f300 8085 	bgt.w	8002e74 <__kernel_rem_pio2+0x62c>
 8002d6a:	9c06      	ldr	r4, [sp, #24]
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	3408      	adds	r4, #8
 8002d70:	2100      	movs	r1, #0
 8002d72:	2d01      	cmp	r5, #1
 8002d74:	f300 809d 	bgt.w	8002eb2 <__kernel_rem_pio2+0x66a>
 8002d78:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8002d7c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8002d80:	f1bb 0f00 	cmp.w	fp, #0
 8002d84:	f040 809b 	bne.w	8002ebe <__kernel_rem_pio2+0x676>
 8002d88:	9b01      	ldr	r3, [sp, #4]
 8002d8a:	e9c3 5600 	strd	r5, r6, [r3]
 8002d8e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8002d92:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8002d96:	e7ca      	b.n	8002d2e <__kernel_rem_pio2+0x4e6>
 8002d98:	3408      	adds	r4, #8
 8002d9a:	ab4a      	add	r3, sp, #296	; 0x128
 8002d9c:	441c      	add	r4, r3
 8002d9e:	462e      	mov	r6, r5
 8002da0:	2000      	movs	r0, #0
 8002da2:	2100      	movs	r1, #0
 8002da4:	2e00      	cmp	r6, #0
 8002da6:	da36      	bge.n	8002e16 <__kernel_rem_pio2+0x5ce>
 8002da8:	f1bb 0f00 	cmp.w	fp, #0
 8002dac:	d039      	beq.n	8002e22 <__kernel_rem_pio2+0x5da>
 8002dae:	4602      	mov	r2, r0
 8002db0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002db4:	9c01      	ldr	r4, [sp, #4]
 8002db6:	e9c4 2300 	strd	r2, r3, [r4]
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8002dc2:	f7fd fb2f 	bl	8000424 <__aeabi_dsub>
 8002dc6:	ae4c      	add	r6, sp, #304	; 0x130
 8002dc8:	2401      	movs	r4, #1
 8002dca:	42a5      	cmp	r5, r4
 8002dcc:	da2c      	bge.n	8002e28 <__kernel_rem_pio2+0x5e0>
 8002dce:	f1bb 0f00 	cmp.w	fp, #0
 8002dd2:	d002      	beq.n	8002dda <__kernel_rem_pio2+0x592>
 8002dd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002dd8:	4619      	mov	r1, r3
 8002dda:	9b01      	ldr	r3, [sp, #4]
 8002ddc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8002de0:	e7a5      	b.n	8002d2e <__kernel_rem_pio2+0x4e6>
 8002de2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8002de6:	eb0d 0403 	add.w	r4, sp, r3
 8002dea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8002dee:	2000      	movs	r0, #0
 8002df0:	2100      	movs	r1, #0
 8002df2:	2d00      	cmp	r5, #0
 8002df4:	da09      	bge.n	8002e0a <__kernel_rem_pio2+0x5c2>
 8002df6:	f1bb 0f00 	cmp.w	fp, #0
 8002dfa:	d002      	beq.n	8002e02 <__kernel_rem_pio2+0x5ba>
 8002dfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002e00:	4619      	mov	r1, r3
 8002e02:	9b01      	ldr	r3, [sp, #4]
 8002e04:	e9c3 0100 	strd	r0, r1, [r3]
 8002e08:	e791      	b.n	8002d2e <__kernel_rem_pio2+0x4e6>
 8002e0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8002e0e:	f7fd fb0b 	bl	8000428 <__adddf3>
 8002e12:	3d01      	subs	r5, #1
 8002e14:	e7ed      	b.n	8002df2 <__kernel_rem_pio2+0x5aa>
 8002e16:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8002e1a:	f7fd fb05 	bl	8000428 <__adddf3>
 8002e1e:	3e01      	subs	r6, #1
 8002e20:	e7c0      	b.n	8002da4 <__kernel_rem_pio2+0x55c>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	e7c5      	b.n	8002db4 <__kernel_rem_pio2+0x56c>
 8002e28:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8002e2c:	f7fd fafc 	bl	8000428 <__adddf3>
 8002e30:	3401      	adds	r4, #1
 8002e32:	e7ca      	b.n	8002dca <__kernel_rem_pio2+0x582>
 8002e34:	e9da 8900 	ldrd	r8, r9, [sl]
 8002e38:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8002e3c:	9b02      	ldr	r3, [sp, #8]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	9302      	str	r3, [sp, #8]
 8002e42:	4632      	mov	r2, r6
 8002e44:	463b      	mov	r3, r7
 8002e46:	4640      	mov	r0, r8
 8002e48:	4649      	mov	r1, r9
 8002e4a:	f7fd faed 	bl	8000428 <__adddf3>
 8002e4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4640      	mov	r0, r8
 8002e58:	4649      	mov	r1, r9
 8002e5a:	f7fd fae3 	bl	8000424 <__aeabi_dsub>
 8002e5e:	4632      	mov	r2, r6
 8002e60:	463b      	mov	r3, r7
 8002e62:	f7fd fae1 	bl	8000428 <__adddf3>
 8002e66:	ed9d 7b08 	vldr	d7, [sp, #32]
 8002e6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002e6e:	ed8a 7b00 	vstr	d7, [sl]
 8002e72:	e76e      	b.n	8002d52 <__kernel_rem_pio2+0x50a>
 8002e74:	e9d4 8900 	ldrd	r8, r9, [r4]
 8002e78:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8002e7c:	4640      	mov	r0, r8
 8002e7e:	4632      	mov	r2, r6
 8002e80:	463b      	mov	r3, r7
 8002e82:	4649      	mov	r1, r9
 8002e84:	f7fd fad0 	bl	8000428 <__adddf3>
 8002e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4640      	mov	r0, r8
 8002e92:	4649      	mov	r1, r9
 8002e94:	f7fd fac6 	bl	8000424 <__aeabi_dsub>
 8002e98:	4632      	mov	r2, r6
 8002e9a:	463b      	mov	r3, r7
 8002e9c:	f7fd fac4 	bl	8000428 <__adddf3>
 8002ea0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002ea4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002ea8:	ed84 7b00 	vstr	d7, [r4]
 8002eac:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002eb0:	e755      	b.n	8002d5e <__kernel_rem_pio2+0x516>
 8002eb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8002eb6:	f7fd fab7 	bl	8000428 <__adddf3>
 8002eba:	3d01      	subs	r5, #1
 8002ebc:	e759      	b.n	8002d72 <__kernel_rem_pio2+0x52a>
 8002ebe:	9b01      	ldr	r3, [sp, #4]
 8002ec0:	9a01      	ldr	r2, [sp, #4]
 8002ec2:	601d      	str	r5, [r3, #0]
 8002ec4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8002ec8:	605c      	str	r4, [r3, #4]
 8002eca:	609f      	str	r7, [r3, #8]
 8002ecc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8002ed0:	60d3      	str	r3, [r2, #12]
 8002ed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002ed6:	6110      	str	r0, [r2, #16]
 8002ed8:	6153      	str	r3, [r2, #20]
 8002eda:	e728      	b.n	8002d2e <__kernel_rem_pio2+0x4e6>
 8002edc:	41700000 	.word	0x41700000
 8002ee0:	3e700000 	.word	0x3e700000
 8002ee4:	00000000 	.word	0x00000000

08002ee8 <__kernel_sin>:
 8002ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eec:	ed2d 8b04 	vpush	{d8-d9}
 8002ef0:	eeb0 8a41 	vmov.f32	s16, s2
 8002ef4:	eef0 8a61 	vmov.f32	s17, s3
 8002ef8:	ec55 4b10 	vmov	r4, r5, d0
 8002efc:	b083      	sub	sp, #12
 8002efe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8002f02:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8002f06:	9001      	str	r0, [sp, #4]
 8002f08:	da06      	bge.n	8002f18 <__kernel_sin+0x30>
 8002f0a:	ee10 0a10 	vmov	r0, s0
 8002f0e:	4629      	mov	r1, r5
 8002f10:	f7fd fcc8 	bl	80008a4 <__aeabi_d2iz>
 8002f14:	2800      	cmp	r0, #0
 8002f16:	d051      	beq.n	8002fbc <__kernel_sin+0xd4>
 8002f18:	4622      	mov	r2, r4
 8002f1a:	462b      	mov	r3, r5
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	4629      	mov	r1, r5
 8002f20:	f7fd f952 	bl	80001c8 <__aeabi_dmul>
 8002f24:	4682      	mov	sl, r0
 8002f26:	468b      	mov	fp, r1
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	4629      	mov	r1, r5
 8002f30:	f7fd f94a 	bl	80001c8 <__aeabi_dmul>
 8002f34:	a341      	add	r3, pc, #260	; (adr r3, 800303c <__kernel_sin+0x154>)
 8002f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3a:	4680      	mov	r8, r0
 8002f3c:	4689      	mov	r9, r1
 8002f3e:	4650      	mov	r0, sl
 8002f40:	4659      	mov	r1, fp
 8002f42:	f7fd f941 	bl	80001c8 <__aeabi_dmul>
 8002f46:	a33f      	add	r3, pc, #252	; (adr r3, 8003044 <__kernel_sin+0x15c>)
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	f7fd fa6a 	bl	8000424 <__aeabi_dsub>
 8002f50:	4652      	mov	r2, sl
 8002f52:	465b      	mov	r3, fp
 8002f54:	f7fd f938 	bl	80001c8 <__aeabi_dmul>
 8002f58:	a33c      	add	r3, pc, #240	; (adr r3, 800304c <__kernel_sin+0x164>)
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	f7fd fa63 	bl	8000428 <__adddf3>
 8002f62:	4652      	mov	r2, sl
 8002f64:	465b      	mov	r3, fp
 8002f66:	f7fd f92f 	bl	80001c8 <__aeabi_dmul>
 8002f6a:	a33a      	add	r3, pc, #232	; (adr r3, 8003054 <__kernel_sin+0x16c>)
 8002f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f70:	f7fd fa58 	bl	8000424 <__aeabi_dsub>
 8002f74:	4652      	mov	r2, sl
 8002f76:	465b      	mov	r3, fp
 8002f78:	f7fd f926 	bl	80001c8 <__aeabi_dmul>
 8002f7c:	a337      	add	r3, pc, #220	; (adr r3, 800305c <__kernel_sin+0x174>)
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	f7fd fa51 	bl	8000428 <__adddf3>
 8002f86:	9b01      	ldr	r3, [sp, #4]
 8002f88:	4606      	mov	r6, r0
 8002f8a:	460f      	mov	r7, r1
 8002f8c:	b9eb      	cbnz	r3, 8002fca <__kernel_sin+0xe2>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4650      	mov	r0, sl
 8002f94:	4659      	mov	r1, fp
 8002f96:	f7fd f917 	bl	80001c8 <__aeabi_dmul>
 8002f9a:	a325      	add	r3, pc, #148	; (adr r3, 8003030 <__kernel_sin+0x148>)
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	f7fd fa40 	bl	8000424 <__aeabi_dsub>
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	f7fd f90e 	bl	80001c8 <__aeabi_dmul>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	f7fd fa38 	bl	8000428 <__adddf3>
 8002fb8:	4604      	mov	r4, r0
 8002fba:	460d      	mov	r5, r1
 8002fbc:	ec45 4b10 	vmov	d0, r4, r5
 8002fc0:	b003      	add	sp, #12
 8002fc2:	ecbd 8b04 	vpop	{d8-d9}
 8002fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fca:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <__kernel_sin+0x150>)
 8002fcc:	ec51 0b18 	vmov	r0, r1, d8
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f7fd f8f9 	bl	80001c8 <__aeabi_dmul>
 8002fd6:	4632      	mov	r2, r6
 8002fd8:	ec41 0b19 	vmov	d9, r0, r1
 8002fdc:	463b      	mov	r3, r7
 8002fde:	4640      	mov	r0, r8
 8002fe0:	4649      	mov	r1, r9
 8002fe2:	f7fd f8f1 	bl	80001c8 <__aeabi_dmul>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	ec51 0b19 	vmov	r0, r1, d9
 8002fee:	f7fd fa19 	bl	8000424 <__aeabi_dsub>
 8002ff2:	4652      	mov	r2, sl
 8002ff4:	465b      	mov	r3, fp
 8002ff6:	f7fd f8e7 	bl	80001c8 <__aeabi_dmul>
 8002ffa:	ec53 2b18 	vmov	r2, r3, d8
 8002ffe:	f7fd fa11 	bl	8000424 <__aeabi_dsub>
 8003002:	a30b      	add	r3, pc, #44	; (adr r3, 8003030 <__kernel_sin+0x148>)
 8003004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003008:	4606      	mov	r6, r0
 800300a:	460f      	mov	r7, r1
 800300c:	4640      	mov	r0, r8
 800300e:	4649      	mov	r1, r9
 8003010:	f7fd f8da 	bl	80001c8 <__aeabi_dmul>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4630      	mov	r0, r6
 800301a:	4639      	mov	r1, r7
 800301c:	f7fd fa04 	bl	8000428 <__adddf3>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4620      	mov	r0, r4
 8003026:	4629      	mov	r1, r5
 8003028:	f7fd f9fc 	bl	8000424 <__aeabi_dsub>
 800302c:	e7c4      	b.n	8002fb8 <__kernel_sin+0xd0>
 800302e:	bf00      	nop
 8003030:	55555549 	.word	0x55555549
 8003034:	3fc55555 	.word	0x3fc55555
 8003038:	3fe00000 	.word	0x3fe00000
 800303c:	5acfd57c 	.word	0x5acfd57c
 8003040:	3de5d93a 	.word	0x3de5d93a
 8003044:	8a2b9ceb 	.word	0x8a2b9ceb
 8003048:	3e5ae5e6 	.word	0x3e5ae5e6
 800304c:	57b1fe7d 	.word	0x57b1fe7d
 8003050:	3ec71de3 	.word	0x3ec71de3
 8003054:	19c161d5 	.word	0x19c161d5
 8003058:	3f2a01a0 	.word	0x3f2a01a0
 800305c:	1110f8a6 	.word	0x1110f8a6
 8003060:	3f811111 	.word	0x3f811111

08003064 <fabs>:
 8003064:	ec51 0b10 	vmov	r0, r1, d0
 8003068:	ee10 2a10 	vmov	r2, s0
 800306c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003070:	ec43 2b10 	vmov	d0, r2, r3
 8003074:	4770      	bx	lr
	...

08003078 <floor>:
 8003078:	ec51 0b10 	vmov	r0, r1, d0
 800307c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003080:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003084:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8003088:	2e13      	cmp	r6, #19
 800308a:	ee10 5a10 	vmov	r5, s0
 800308e:	ee10 8a10 	vmov	r8, s0
 8003092:	460c      	mov	r4, r1
 8003094:	dc32      	bgt.n	80030fc <floor+0x84>
 8003096:	2e00      	cmp	r6, #0
 8003098:	da14      	bge.n	80030c4 <floor+0x4c>
 800309a:	a333      	add	r3, pc, #204	; (adr r3, 8003168 <floor+0xf0>)
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f7fd f9c2 	bl	8000428 <__adddf3>
 80030a4:	2200      	movs	r2, #0
 80030a6:	2300      	movs	r3, #0
 80030a8:	f7fd fbf2 	bl	8000890 <__aeabi_dcmpgt>
 80030ac:	b138      	cbz	r0, 80030be <floor+0x46>
 80030ae:	2c00      	cmp	r4, #0
 80030b0:	da57      	bge.n	8003162 <floor+0xea>
 80030b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80030b6:	431d      	orrs	r5, r3
 80030b8:	d001      	beq.n	80030be <floor+0x46>
 80030ba:	4c2d      	ldr	r4, [pc, #180]	; (8003170 <floor+0xf8>)
 80030bc:	2500      	movs	r5, #0
 80030be:	4621      	mov	r1, r4
 80030c0:	4628      	mov	r0, r5
 80030c2:	e025      	b.n	8003110 <floor+0x98>
 80030c4:	4f2b      	ldr	r7, [pc, #172]	; (8003174 <floor+0xfc>)
 80030c6:	4137      	asrs	r7, r6
 80030c8:	ea01 0307 	and.w	r3, r1, r7
 80030cc:	4303      	orrs	r3, r0
 80030ce:	d01f      	beq.n	8003110 <floor+0x98>
 80030d0:	a325      	add	r3, pc, #148	; (adr r3, 8003168 <floor+0xf0>)
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d6:	f7fd f9a7 	bl	8000428 <__adddf3>
 80030da:	2200      	movs	r2, #0
 80030dc:	2300      	movs	r3, #0
 80030de:	f7fd fbd7 	bl	8000890 <__aeabi_dcmpgt>
 80030e2:	2800      	cmp	r0, #0
 80030e4:	d0eb      	beq.n	80030be <floor+0x46>
 80030e6:	2c00      	cmp	r4, #0
 80030e8:	bfbe      	ittt	lt
 80030ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80030ee:	fa43 f606 	asrlt.w	r6, r3, r6
 80030f2:	19a4      	addlt	r4, r4, r6
 80030f4:	ea24 0407 	bic.w	r4, r4, r7
 80030f8:	2500      	movs	r5, #0
 80030fa:	e7e0      	b.n	80030be <floor+0x46>
 80030fc:	2e33      	cmp	r6, #51	; 0x33
 80030fe:	dd0b      	ble.n	8003118 <floor+0xa0>
 8003100:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003104:	d104      	bne.n	8003110 <floor+0x98>
 8003106:	ee10 2a10 	vmov	r2, s0
 800310a:	460b      	mov	r3, r1
 800310c:	f7fd f98c 	bl	8000428 <__adddf3>
 8003110:	ec41 0b10 	vmov	d0, r0, r1
 8003114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003118:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800311c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003120:	fa23 f707 	lsr.w	r7, r3, r7
 8003124:	4207      	tst	r7, r0
 8003126:	d0f3      	beq.n	8003110 <floor+0x98>
 8003128:	a30f      	add	r3, pc, #60	; (adr r3, 8003168 <floor+0xf0>)
 800312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312e:	f7fd f97b 	bl	8000428 <__adddf3>
 8003132:	2200      	movs	r2, #0
 8003134:	2300      	movs	r3, #0
 8003136:	f7fd fbab 	bl	8000890 <__aeabi_dcmpgt>
 800313a:	2800      	cmp	r0, #0
 800313c:	d0bf      	beq.n	80030be <floor+0x46>
 800313e:	2c00      	cmp	r4, #0
 8003140:	da02      	bge.n	8003148 <floor+0xd0>
 8003142:	2e14      	cmp	r6, #20
 8003144:	d103      	bne.n	800314e <floor+0xd6>
 8003146:	3401      	adds	r4, #1
 8003148:	ea25 0507 	bic.w	r5, r5, r7
 800314c:	e7b7      	b.n	80030be <floor+0x46>
 800314e:	2301      	movs	r3, #1
 8003150:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003154:	fa03 f606 	lsl.w	r6, r3, r6
 8003158:	4435      	add	r5, r6
 800315a:	4545      	cmp	r5, r8
 800315c:	bf38      	it	cc
 800315e:	18e4      	addcc	r4, r4, r3
 8003160:	e7f2      	b.n	8003148 <floor+0xd0>
 8003162:	2500      	movs	r5, #0
 8003164:	462c      	mov	r4, r5
 8003166:	e7aa      	b.n	80030be <floor+0x46>
 8003168:	8800759c 	.word	0x8800759c
 800316c:	7e37e43c 	.word	0x7e37e43c
 8003170:	bff00000 	.word	0xbff00000
 8003174:	000fffff 	.word	0x000fffff

08003178 <scalbn>:
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	ec55 4b10 	vmov	r4, r5, d0
 800317e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8003182:	4606      	mov	r6, r0
 8003184:	462b      	mov	r3, r5
 8003186:	b99a      	cbnz	r2, 80031b0 <scalbn+0x38>
 8003188:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800318c:	4323      	orrs	r3, r4
 800318e:	d036      	beq.n	80031fe <scalbn+0x86>
 8003190:	4b39      	ldr	r3, [pc, #228]	; (8003278 <scalbn+0x100>)
 8003192:	4629      	mov	r1, r5
 8003194:	ee10 0a10 	vmov	r0, s0
 8003198:	2200      	movs	r2, #0
 800319a:	f7fd f815 	bl	80001c8 <__aeabi_dmul>
 800319e:	4b37      	ldr	r3, [pc, #220]	; (800327c <scalbn+0x104>)
 80031a0:	429e      	cmp	r6, r3
 80031a2:	4604      	mov	r4, r0
 80031a4:	460d      	mov	r5, r1
 80031a6:	da10      	bge.n	80031ca <scalbn+0x52>
 80031a8:	a32b      	add	r3, pc, #172	; (adr r3, 8003258 <scalbn+0xe0>)
 80031aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ae:	e03a      	b.n	8003226 <scalbn+0xae>
 80031b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80031b4:	428a      	cmp	r2, r1
 80031b6:	d10c      	bne.n	80031d2 <scalbn+0x5a>
 80031b8:	ee10 2a10 	vmov	r2, s0
 80031bc:	4620      	mov	r0, r4
 80031be:	4629      	mov	r1, r5
 80031c0:	f7fd f932 	bl	8000428 <__adddf3>
 80031c4:	4604      	mov	r4, r0
 80031c6:	460d      	mov	r5, r1
 80031c8:	e019      	b.n	80031fe <scalbn+0x86>
 80031ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80031ce:	460b      	mov	r3, r1
 80031d0:	3a36      	subs	r2, #54	; 0x36
 80031d2:	4432      	add	r2, r6
 80031d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80031d8:	428a      	cmp	r2, r1
 80031da:	dd08      	ble.n	80031ee <scalbn+0x76>
 80031dc:	2d00      	cmp	r5, #0
 80031de:	a120      	add	r1, pc, #128	; (adr r1, 8003260 <scalbn+0xe8>)
 80031e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031e4:	da1c      	bge.n	8003220 <scalbn+0xa8>
 80031e6:	a120      	add	r1, pc, #128	; (adr r1, 8003268 <scalbn+0xf0>)
 80031e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031ec:	e018      	b.n	8003220 <scalbn+0xa8>
 80031ee:	2a00      	cmp	r2, #0
 80031f0:	dd08      	ble.n	8003204 <scalbn+0x8c>
 80031f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80031f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80031fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80031fe:	ec45 4b10 	vmov	d0, r4, r5
 8003202:	bd70      	pop	{r4, r5, r6, pc}
 8003204:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003208:	da19      	bge.n	800323e <scalbn+0xc6>
 800320a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800320e:	429e      	cmp	r6, r3
 8003210:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8003214:	dd0a      	ble.n	800322c <scalbn+0xb4>
 8003216:	a112      	add	r1, pc, #72	; (adr r1, 8003260 <scalbn+0xe8>)
 8003218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e2      	bne.n	80031e6 <scalbn+0x6e>
 8003220:	a30f      	add	r3, pc, #60	; (adr r3, 8003260 <scalbn+0xe8>)
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	f7fc ffcf 	bl	80001c8 <__aeabi_dmul>
 800322a:	e7cb      	b.n	80031c4 <scalbn+0x4c>
 800322c:	a10a      	add	r1, pc, #40	; (adr r1, 8003258 <scalbn+0xe0>)
 800322e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0b8      	beq.n	80031a8 <scalbn+0x30>
 8003236:	a10e      	add	r1, pc, #56	; (adr r1, 8003270 <scalbn+0xf8>)
 8003238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800323c:	e7b4      	b.n	80031a8 <scalbn+0x30>
 800323e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003242:	3236      	adds	r2, #54	; 0x36
 8003244:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003248:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800324c:	4620      	mov	r0, r4
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <scalbn+0x108>)
 8003250:	2200      	movs	r2, #0
 8003252:	e7e8      	b.n	8003226 <scalbn+0xae>
 8003254:	f3af 8000 	nop.w
 8003258:	c2f8f359 	.word	0xc2f8f359
 800325c:	01a56e1f 	.word	0x01a56e1f
 8003260:	8800759c 	.word	0x8800759c
 8003264:	7e37e43c 	.word	0x7e37e43c
 8003268:	8800759c 	.word	0x8800759c
 800326c:	fe37e43c 	.word	0xfe37e43c
 8003270:	c2f8f359 	.word	0xc2f8f359
 8003274:	81a56e1f 	.word	0x81a56e1f
 8003278:	43500000 	.word	0x43500000
 800327c:	ffff3cb0 	.word	0xffff3cb0
 8003280:	3c900000 	.word	0x3c900000

08003284 <_init>:
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	bf00      	nop
 8003288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328a:	bc08      	pop	{r3}
 800328c:	469e      	mov	lr, r3
 800328e:	4770      	bx	lr

08003290 <_fini>:
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	bf00      	nop
 8003294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003296:	bc08      	pop	{r3}
 8003298:	469e      	mov	lr, r3
 800329a:	4770      	bx	lr
